#!/bin/bash

# Enhanced AI Task Execution Script with OpenRouter API
# Usage: ./execute-ai-task.sh <issue_number>
#
# This script provides:
# - Comprehensive retry logic with exponential backoff
# - Circuit breaker pattern integration
# - Detailed error classification and reporting
# - Prerequisite validation
# - Security-focused output sanitization
# - Cost estimation and monitoring

set -euo pipefail

# Usage message function
usage() {
    echo "Usage: $0 <issue_number>" >&2
    exit 1
}

# Validate arguments: must have exactly 1 argument which is all digits
if [[ $# -ne 1 ]]; then
    echo "Error: issue_number argument missing." >&2
    usage
elif [[ ! $1 =~ ^[0-9]+$ ]]; then
    echo "Error: issue_number must be numeric." >&2
    usage
fi

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/lib"

# Source all required libraries
source "$LIB_DIR/common.sh"
source "$LIB_DIR/retry-utils.sh"
source "$LIB_DIR/error-handling.sh"
source "$LIB_DIR/circuit-breaker-integration.sh"
source "$LIB_DIR/prerequisite-validation.sh"
source "$LIB_DIR/openrouter-client.sh"
source "$LIB_DIR/cost-estimator.sh"

# Configuration
AI_MODEL="${AI_MODEL:-anthropic/claude-3.5-sonnet}"
MAX_PROMPT_SIZE=10000
MAX_RESPONSE_SIZE=50000

# Get issue details from GitHub API
get_issue_details() {
    local issue_number="$1"

    log_info "Fetching issue #${issue_number} details..."

    local issue_data
    issue_data=$(curl -s \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${issue_number}" 2>/dev/null)

    if [[ -z "$issue_data" ]] || echo "$issue_data" | jq -e '.message' >/dev/null 2>&1; then
        log_error "Failed to fetch issue details or issue not found"
        return 1
    fi

    echo "$issue_data"
}

# Build AI prompt from issue data
build_ai_prompt() {
    local title="$1"
    local body="$2"
    local labels="$3"

    # Build comprehensive but cost-controlled prompt
    cat << EOF
You are an AI assistant helping to implement GitHub issues in a software development workflow.

**Issue Title:** $title

**Issue Description:**
$body

**Labels:** $labels

**Instructions:**
1. Analyze the requirements carefully
2. Implement the necessary changes following existing code patterns
3. Ensure your changes are complete and functional
4. Add appropriate tests if needed
5. Update documentation if required
6. Follow security best practices
7. Keep responses focused and actionable

**Repository Context:**
This is an AI-powered workflow template with GitHub Actions integration. Please examine the existing codebase structure and follow established patterns.

**Response Format:**
Please provide your implementation with clear explanations of what you're doing and why. Use existing libraries and utilities where appropriate.
EOF
}

# Process AI response and create files
process_ai_response() {
    local response="$1"
    local issue_number="$2"

    log_info "Processing AI response for issue #${issue_number}..."

    # Validate response size
    local response_size=${#response}
    if (( response_size > MAX_RESPONSE_SIZE )); then
        log_warn "Large AI response detected (${response_size} chars), truncating..."
        response="${response:0:$MAX_RESPONSE_SIZE}"
    fi

    # Create response file for debugging
    local response_file="ai_response_${issue_number}.md"
    echo "$response" > "$response_file"

    log_info "AI response saved to $response_file (${#response} characters)"

    # Check if the response contains code or instructions to implement
    if echo "$response" | grep -qE '(```|implement|create|modify|update)'; then
        log_info "AI response contains implementation instructions"
        return 0
    else
        log_warn "AI response may not contain actionable implementation"
        return 0
    fi
}

# Handle AI execution failure
handle_ai_execution_failure() {
    local issue_number="$1"

    log_error "AI execution failed for issue #${issue_number}"

    # Create failure comment on issue
    local comment_body="🚨 **AI Task Execution Failed**\n\nThe AI assistant was unable to complete this task. This could be due to:\n\n- API rate limits or service issues\n- Invalid or unclear requirements\n- Technical constraints\n\nPlease review the issue description and try again, or implement manually.\n\nGenerated by AI Workflow Assistant"

    # Post comment to GitHub issue
    curl -s -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Content-Type: application/json" \
        "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${issue_number}/comments" \
        -d "$(jq -n --arg body "$comment_body" '{body: $body}')" >/dev/null

    return 1
}

# Main execution function with comprehensive error handling
main() {
    local issue_number="$1"
    local overall_exit_code=0

    log_info "🚀 ENHANCED AI TASK EXECUTION"
    log_info "═══════════════════════════════════════════════════"
    log_info "Issue: #$issue_number"
    log_info "Timestamp: $(date)"
    log_info "Script: $0"
    log_info "═══════════════════════════════════════════════════"

    # Step 1: Comprehensive prerequisite validation
    log_info "🔍 STEP 1: COMPREHENSIVE PREREQUISITE VALIDATION"
    local validation_result=0
    validate_all_prerequisites "ai_operations" "github_operations" || validation_result=$?

    # In test environments, warnings are acceptable, only critical failures should abort
    if [[ "$validation_result" -eq 1 ]]; then
        log_error "❌ Prerequisite validation failed - aborting execution"
        log_error "   Please resolve all critical errors before proceeding"
        exit 1
    elif [[ "$validation_result" -eq 2 ]]; then
        log_info "⚠️  Prerequisite validation completed with warnings - continuing"
    fi

    # Step 2: Get issue details
    log_info "📋 STEP 2: GETTING ISSUE DETAILS"
    local issue_data
    if ! issue_data=$(get_issue_details "$issue_number"); then
        log_error "❌ Failed to retrieve issue details"
        exit 1
    fi

    local title body labels
    title=$(echo "$issue_data" | jq -r '.title')
    body=$(echo "$issue_data" | jq -r '.body // ""')
    labels=$(echo "$issue_data" | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')

    log_info "Issue: $title"
    log_info "Labels: $labels"

    # Step 3: Build AI prompt
    log_info "📝 STEP 3: BUILDING AI PROMPT"
    local prompt
    prompt=$(build_ai_prompt "$title" "$body" "$labels")
    local prompt_size=${#prompt}

    if (( prompt_size > MAX_PROMPT_SIZE )); then
        log_error "❌ Prompt too large (${prompt_size} chars, max ${MAX_PROMPT_SIZE})"
        log_error "   Please break down the issue into smaller tasks"
        exit 1
    fi

    log_info "Generated prompt (${prompt_size} characters)"

    # Step 4: Execute AI task with OpenRouter
    log_info "🤖 STEP 4: EXECUTING AI TASK WITH OPENROUTER"
    local response
    if execute_ai_task_with_models "$prompt" response; then
        log_info "✅ AI execution successful with response (${#response} characters)"

        # Process response
        if process_ai_response "$response" "$issue_number"; then
            log_info "✅ AI response processed successfully"

            # Update cost tracking if we have usage data
            if [[ -n "${OPENROUTER_USAGE:-}" ]]; then
                update_openrouter_cost_tracking "$AI_MODEL" "$prompt" "$OPENROUTER_USAGE"
            fi
        else
            log_error "❌ Failed to process AI response"
            handle_ai_execution_failure "$issue_number"
            overall_exit_code=1
        fi
    else
        log_error "❌ AI execution failed"
        handle_ai_execution_failure "$issue_number"
        overall_exit_code=1
    fi

    # Step 5: Cleanup and final status
    log_info "🧹 STEP 5: CLEANUP AND FINAL STATUS"
    secure_cleanup "ai_response_${issue_number}.md"

    # Check for changes and set GitHub Actions output
    log_info "🔍 Checking for changes..."
    local untracked_files
    untracked_files="$(git ls-files --others --exclude-standard)"

    if git diff --quiet && git diff --cached --quiet && [[ -z "$untracked_files" ]]; then
        log_info "ℹ️  No changes detected - workflow completed without modifications"
        echo "has_changes=false" >> "${GITHUB_OUTPUT:-/dev/null}"
    else
        log_info "✅ Changes detected - proceeding with commit workflow"
        echo "has_changes=true" >> "${GITHUB_OUTPUT:-/dev/null}"
    fi

    log_info "═══════════════════════════════════════════════════"
    log_info "🏁 EXECUTION SUMMARY"
    log_info "═══════════════════════════════════════════════════"
    # log_info "Issue: #$issue_number - $title"
    log_info "Exit code: $overall_exit_code"

    if [[ $overall_exit_code -eq 0 ]]; then
        log_info "Status: ✅ SUCCESS"
    else
        log_error "Status: ❌ FAILED"
    fi
    log_info "═══════════════════════════════════════════════════"

    exit $overall_exit_code
}

# Execute main function with provided issue number
main "$1"
