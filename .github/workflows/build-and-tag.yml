name: Build and Tag

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      tag_name:
        description: 'Custom tag name (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write    # Required for git push, creating tags, and updating package.json
  actions: write     # Required for workflow operations

jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    # Only run on merged PRs, not closed without merge
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    outputs:
      new-tag: ${{ steps.bump.outputs.new-tag }}
      version: ${{ steps.bump.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        echo "‚úÖ Dependencies installed and dist files built successfully"

    - name: Verify build output
      run: |
        if [ ! -f "dist/index.js" ]; then
          echo "Build failed: dist/index.js not found"
          exit 1
        fi
        echo "Build successful: dist/index.js created"

    - name: Run tests
      run: npm test

    - name: Run linting
      run: npm run lint

    - name: Run security scan
      run: npm run lint:security

    - name: Get current version
      id: current-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: bump
      env:
        CURRENT_VERSION: ${{ steps.current-version.outputs.version }}
        TAG_NAME_INPUT: ${{ github.event.inputs.tag_name }}
        VERSION_TYPE_INPUT: ${{ github.event.inputs.version_type || 'patch' }}
      run: |
        current_version="$CURRENT_VERSION"

        # Validate current version follows semantic versioning
        if ! echo "$current_version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "ERROR: Current version in package.json is not semantic: $current_version"
          echo "Expected format: X.Y.Z (e.g., 1.2.3)"
          exit 1
        fi

        if [ -n "$TAG_NAME_INPUT" ]; then
          # Manual tag name provided
          new_tag="$TAG_NAME_INPUT"
          # Extract version from tag (remove 'v' prefix if present)
          new_version=$(echo "$new_tag" | sed 's/^v//')

          # Validate semantic versioning format (X.Y.Z)
          if ! echo "$new_version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "ERROR: Invalid semantic version format: $new_version"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
        else
          # Automatic version bump
          version_type="$VERSION_TYPE_INPUT"

          # Parse current version
          IFS='.' read -r major minor patch <<< "$current_version"

          case "$version_type" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          new_version="$major.$minor.$patch"
          new_tag="v$new_version"
        fi

        echo "new-tag=$new_tag" >> $GITHUB_OUTPUT
        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "Current version: $current_version"
        echo "New version: $new_version"
        echo "New tag: $new_tag"

    - name: Build fresh dist files for release
      run: |
        echo "Building fresh dist files for release..."
        # Ensure clean, fresh build for release
        npm ci
        npm run build
        echo "‚úÖ Fresh dist files built for release with clean dependencies"

    - name: Update CHANGELOG.md
      run: |
        set -euo pipefail  # Robust error handling

        # Get the current date and version
        RELEASE_DATE=$(date +%Y-%m-%d)
        NEW_VERSION="${{ steps.bump.outputs.version }}"
        NODE_VERSION="20"  # Hardcoded - update if Node.js version changes

        # Create a temporary file with the new changelog entry
        cat > changelog_entry.md << EOF
        ## [$NEW_VERSION] - $RELEASE_DATE

        ### Added
        - Automated CHANGELOG.md update during release workflow
        - Enhanced build and tagging process for version $NEW_VERSION

        ### Changed
        - Automatic version bump and distribution file regeneration for release
        - Updated compiled JavaScript bundle in dist/ directory

        ### Technical
        - Build from commit: ${{ github.sha }}
        - Build date: $RELEASE_DATE
        - Node.js version: $NODE_VERSION

        EOF

        # Update CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          # Create a backup
          cp CHANGELOG.md CHANGELOG.md.bak

          # Find the first version entry line to insert before it
          # Look for the first line starting with "## [" (version entry)
          FIRST_VERSION_LINE=$(grep -n "^## \[" CHANGELOG.md | head -n 1 | cut -d: -f1 || echo "")

          if [ -n "$FIRST_VERSION_LINE" ]; then
            # Insert before the first version entry
            head -n $((FIRST_VERSION_LINE - 1)) CHANGELOG.md > CHANGELOG_new.md
            cat changelog_entry.md >> CHANGELOG_new.md
            tail -n +$FIRST_VERSION_LINE CHANGELOG.md >> CHANGELOG_new.md
          else
            # No existing version entries found, append to end
            cat CHANGELOG.md > CHANGELOG_new.md
            cat changelog_entry.md >> CHANGELOG_new.md
          fi

          # Replace the original file
          mv CHANGELOG_new.md CHANGELOG.md

          echo "‚úÖ Updated CHANGELOG.md with version $NEW_VERSION"
        else
          echo "‚ö†Ô∏è CHANGELOG.md not found, skipping changelog update"
        fi

        # Clean up temporary file
        rm -f changelog_entry.md

    - name: Update package.json version and commit dist files
      run: |
        npm version ${{ steps.bump.outputs.version }} --no-git-tag-version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json dist/ CHANGELOG.md --force
        git commit -m "chore: bump version to ${{ steps.bump.outputs.version }} and update dist files"

    - name: Verify dist files are committed
      run: |
        echo "Verifying dist files are included in the latest commit..."
        git show --name-only HEAD | grep -E "^dist/" || {
          echo "ERROR: dist files not found in latest commit"
          echo "Files in latest commit:"
          git show --name-only HEAD
          exit 1
        }
        echo "‚úÖ dist files successfully committed"

    - name: Push version update
      run: git push origin main

    - name: Create and push tag
      run: |
        git tag ${{ steps.bump.outputs.new-tag }}
        git push origin ${{ steps.bump.outputs.new-tag }}

    - name: Update major version tag
      run: |
        new_version="${{ steps.bump.outputs.version }}"
        new_tag="${{ steps.bump.outputs.new-tag }}"

        # Extract major version (e.g., "1" from "1.2.3")
        major_version=$(echo "$new_version" | cut -d. -f1)
        major_tag="v$major_version"

        echo "Updating major version tag: $major_tag -> $new_tag"

        # Create or update the major version tag to point to the new specific version
        git tag -f "$major_tag" "$new_tag"
        git push origin "$major_tag" --force

        echo "‚úÖ Major version tag $major_tag updated to point to $new_tag"

    - name: Create pre-release notes
      id: release-notes
      run: |
        cat > release_notes.md << 'EOF'
        ## üöÄ Release ${{ steps.bump.outputs.new-tag }}

        ### What's Changed
        - Built from commit: ${{ github.sha }}
        - Build date: $(date -u)
        - Node.js version: 20

        ### Artifacts
        - `dist.zip` - Compiled JavaScript bundle ready for GitHub Actions

        ### Installation
        ```yaml
        - uses: stillrivercode/stillriver-ai-bot@${{ steps.bump.outputs.new-tag }}
        ```

        ### Verification
        Build verified with:
        - ‚úÖ Tests passed
        - ‚úÖ Linting passed
        - ‚úÖ Security scan passed
        - ‚úÖ Build successful

        ---
        *This release was automatically created by the Build and Tag workflow.*
        EOF

        echo "notes-file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-dist-${{ steps.bump.outputs.new-tag }}
        path: |
          dist/
          package.json
          README.md
          LICENSE
        retention-days: 90

  verify-release:
    needs: build-and-tag
    runs-on: ubuntu-latest
    if: needs.build-and-tag.outputs.new-tag

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify tag was created
      run: |
        echo "Verifying tag: ${{ needs.build-and-tag.outputs.new-tag }}"

        # Wait a moment for tag to propagate
        sleep 5

        # Check if tag exists
        if git ls-remote --tags origin | grep -q "${{ needs.build-and-tag.outputs.new-tag }}"; then
          echo "‚úÖ Tag ${{ needs.build-and-tag.outputs.new-tag }} successfully created"
        else
          echo "‚ùå Tag ${{ needs.build-and-tag.outputs.new-tag }} not found"
          exit 1
        fi

    - name: Trigger release workflow
      run: |
        echo "üéâ Build and tag complete!"
        echo "Tag: ${{ needs.build-and-tag.outputs.new-tag }}"
        echo "Version: ${{ needs.build-and-tag.outputs.version }}"
        echo "The release workflow should now be triggered automatically by the new tag."
