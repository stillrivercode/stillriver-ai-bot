name: AI Fix Security Issues

# Centralized timeout configuration
env:
  WORKFLOW_TIMEOUT_MINUTES: 30
  CLI_INSTALL_TIMEOUT_MINUTES: 5
  AI_EXECUTION_TIMEOUT_MINUTES: ${{ vars.AI_EXECUTION_TIMEOUT_MINUTES || '10' }}

on:
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: 'Pull Request number to fix'
        required: true
        type: number

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  security-events: read

jobs:
  ai-fix-security:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    concurrency:
      group: ai-workflows-pr-${{ inputs.pull_request_number }}
      cancel-in-progress: false

    steps:
      - name: Get PR details
        id: pr_details
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ inputs.pull_request_number }}
        run: |
          PR_INFO=$(gh pr view "$PR_NUMBER" --json headRefName,number)
          echo "head_ref=$(echo $PR_INFO | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          echo "pr_number=$(echo $PR_INFO | jq -r '.number')" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          ref: ${{ steps.pr_details.outputs.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python (for OpenRouter script)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install OpenRouter dependencies
        run: |
          pip install openai==1.54.3 httpx==0.27.0

      - name: Install Node.js dependencies
        run: npm ci


      - name: Download security scan artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          name: security-scan-results
          path: ./security-artifacts/
          pr: ${{ inputs.pull_request_number }}
          workflow: quality-checks.yml
          workflow_conclusion: ""
        continue-on-error: true

      - name: Process security scan results
        id: security_check
        run: |
          echo "## Security Issues Found" > security_issues.md
          echo "" >> security_issues.md

          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq

          # Process npm audit results
          echo "### npm audit - Vulnerable Dependencies:" >> security_issues.md
          if [ -f "./security-artifacts/npm-audit-results.json" ] && [ -s "./security-artifacts/npm-audit-results.json" ]; then
            AUDIT_COUNT=$(jq '.vulnerabilities | length' ./security-artifacts/npm-audit-results.json 2>/dev/null || echo "0")
            if [ "$AUDIT_COUNT" -gt 0 ]; then
              echo "Found $AUDIT_COUNT npm audit vulnerabilities:" >> security_issues.md
              echo '```json' >> security_issues.md
              jq '.vulnerabilities' ./security-artifacts/npm-audit-results.json >> security_issues.md
              echo '```' >> security_issues.md
            else
              echo "No npm audit vulnerabilities found" >> security_issues.md
            fi
          else
            echo "No npm audit results available" >> security_issues.md
          fi
          echo "" >> security_issues.md

          # Process audit-ci results
          echo "### audit-ci - Additional Security Checks:" >> security_issues.md
          if [ -f "./security-artifacts/audit-ci-results.json" ] && [ -s "./security-artifacts/audit-ci-results.json" ]; then
            AUDIT_CI_COUNT=$(jq '. | length' ./security-artifacts/audit-ci-results.json 2>/dev/null || echo "0")
            if [ "$AUDIT_CI_COUNT" -gt 0 ]; then
              echo "Found $AUDIT_CI_COUNT audit-ci issues:" >> security_issues.md
              echo '```json' >> security_issues.md
              cat ./security-artifacts/audit-ci-results.json >> security_issues.md
              echo '```' >> security_issues.md
            else
              echo "No audit-ci issues found" >> security_issues.md
            fi
          else
            echo "No audit-ci results available" >> security_issues.md
          fi
          echo "" >> security_issues.md

          # Process Semgrep results
          echo "### Semgrep Security Issues:" >> security_issues.md
          if [ -f "./security-artifacts/semgrep-results.json" ] && [ -s "./security-artifacts/semgrep-results.json" ]; then
            SEMGREP_COUNT=$(jq '.results | length' ./security-artifacts/semgrep-results.json 2>/dev/null || echo "0")
            if [ "$SEMGREP_COUNT" -gt 0 ]; then
              echo "Found $SEMGREP_COUNT Semgrep issues:" >> security_issues.md
              echo '```json' >> security_issues.md
              jq '.results' ./security-artifacts/semgrep-results.json >> security_issues.md
              echo '```' >> security_issues.md
            else
              echo "No Semgrep issues found" >> security_issues.md
            fi
          else
            echo "No Semgrep results available" >> security_issues.md
          fi

      - name: AI Fix Security Issues
        timeout-minutes: ${{ fromJSON(env.AI_EXECUTION_TIMEOUT_MINUTES) }}
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          AI_MODEL: ${{ vars.AI_MODEL || 'anthropic/claude-3.5-sonnet' }}
        run: |
          # Create a comprehensive prompt for Claude
          cat << 'PROMPT_EOF' > fix_security_prompt.md
          I need help fixing security issues in this codebase. Here are the current security vulnerabilities:

          PROMPT_EOF

          # Append security issues content
          cat security_issues.md >> fix_security_prompt.md

          # Append rest of prompt safely
          cat << 'PROMPT_EOF' >> fix_security_prompt.md

          Please help me fix these security issues by directly modifying the files in this repository. The fixes should:
          1. Address all identified security vulnerabilities
          2. Follow security best practices
          3. Maintain code functionality
          4. Not introduce new security issues
          5. Use proper input validation and sanitization
          6. Fix any hardcoded secrets or credentials
          7. Address any SQL injection, XSS, or other injection vulnerabilities
          8. Fix insecure cryptographic practices
          9. Address any path traversal vulnerabilities
          10. Fix unsafe deserialization issues

          Please analyze the security issues and make the necessary file changes to fix these vulnerabilities while
          preserving functionality. Use the Edit tool to modify files directly.
          PROMPT_EOF

          # Use AI via OpenRouter to fix the issues
          echo "🤖 Using $AI_MODEL via OpenRouter to fix security issues..."
          python ./scripts/openrouter-ai-helper.py \
            --prompt-file fix_security_prompt.md \
            --output-file ai_security_response.md \
            --model "$AI_MODEL" \
            --title "AI Security Fix"

          echo "AI Response:"
          cat ai_security_response.md

      - name: Verify fixes by running security scans again
        run: |
          echo "## Verifying security fixes..."

          # Install security tools for verification
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

          # Run security checks again
          bandit -r . \
            --exclude ./tests,./test,./venv,./.venv,./node_modules \
            || echo "Bandit still reports issues"

          pip freeze | safety check --stdin || echo "Safety still reports issues"

          if command -v semgrep >/dev/null 2>&1; then
            semgrep --config=auto . || echo "Semgrep still reports issues"
          fi

      - name: Run additional security validation
        run: |
          echo "## Additional security validation..."

          # Check for common security anti-patterns
          echo "Checking for hardcoded secrets..."
          grep -r -i "password\|secret\|key\|token" --include="*.py" --include="*.js" --include="*.yaml" --include="*.yml" . || echo "No obvious hardcoded secrets found"

          echo "Checking for SQL injection patterns..."
          grep -r "execute.*%" --include="*.py" . || echo "No obvious SQL injection patterns found"

          echo "Checking for XSS vulnerabilities..."
          grep -r "innerHTML\|eval\|document.write" --include="*.js" --include="*.html" . || echo "No obvious XSS patterns found"

      - name: Commit and push fixes
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ inputs.pull_request_number }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "CHANGES_MADE=true" >> $GITHUB_ENV
          git commit -m "$(cat <<EOF
          🔒 AI Security Fix: Resolve security vulnerabilities

          Automatically generated fixes for security issues reported in PR #${PR_NUMBER}

          Changes made:
          - Fixed Bandit security issues
          - Addressed vulnerable dependencies
          - Resolved Semgrep security findings
          - Applied security best practices
          - Fixed input validation issues
          - Secured cryptographic implementations
          - Addressed injection vulnerabilities

          🤖 Generated with OpenRouter AI

          Co-Authored-By: AI Assistant <noreply@openrouter.ai>
          EOF
          )"

          # Pull latest changes before pushing to avoid conflicts
          git pull --rebase origin "$HEAD_REF" || true
          git push origin "$HEAD_REF"

      - name: Remove triggering label
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ inputs.pull_request_number }}
        run: |
          echo "Removing ai-fix-security label from PR #$PR_NUMBER"
          gh pr edit "$PR_NUMBER" --remove-label "ai-fix-security"
          echo "✅ Successfully removed ai-fix-security label"

      - name: Comment on PR
        if: env.CHANGES_MADE == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔒 **AI Security Fixes Applied**

              I've automatically fixed the security vulnerabilities directly in this PR!

              The AI has analyzed and fixed:
              - ✅ Bandit security issues
              - ✅ Vulnerable dependencies (Safety)
              - ✅ Semgrep security findings
              - ✅ Common security anti-patterns
              - ✅ Input validation issues
              - ✅ Cryptographic vulnerabilities
              - ✅ Injection vulnerabilities

              The \`ai-fix-security\` label has been removed. The fixes have been committed directly to this branch.

              **⚠️ Important:** Please conduct a thorough security review of the generated fixes before merging! 🔍`
            });

      - name: Comment on PR if no changes needed
        if: env.CHANGES_MADE == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔒 **AI Security Check Complete**

              Good news! No security issues were found that need fixing.

              The \`ai-fix-security\` label has been removed.

              All security checks are passing! ✅`
            });
