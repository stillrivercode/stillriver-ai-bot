{"version":"1.127.1","results":[{"check_id":"generic.secrets.security.detected-github-token.detected-github-token","path":".env","start":{"line":2,"col":1,"offset":127},"end":{"line":2,"col":48,"offset":174},"extra":{"message":"GitHub Token detected","metadata":{"cwe":["CWE-798: Use of Hard-coded Credentials"],"source-rule-url":"https://github.blog/changelog/2021-03-04-authentication-token-format-updates/","category":"security","technology":["secrets","github"],"confidence":"LOW","owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-github-token.detected-github-token","shortlink":"https://sg.run/PpOv"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"generic.secrets.security.detected-generic-api-key.detected-generic-api-key","path":".env","start":{"line":4,"col":10,"offset":277},"end":{"line":4,"col":57,"offset":324},"extra":{"message":"Generic API Key detected","metadata":{"source-rule-url":"https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json","category":"security","technology":["secrets"],"confidence":"LOW","references":["https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json"],"owasp":["A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-generic-api-key.detected-generic-api-key","shortlink":"https://sg.run/qxj8"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"generic.secrets.security.detected-generic-api-key.detected-generic-api-key","path":".env","start":{"line":5,"col":8,"offset":348},"end":{"line":5,"col":55,"offset":395},"extra":{"message":"Generic API Key detected","metadata":{"source-rule-url":"https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json","category":"security","technology":["secrets"],"confidence":"LOW","references":["https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json"],"owasp":["A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-generic-api-key.detected-generic-api-key","shortlink":"https://sg.run/qxj8"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":73,"col":18,"offset":1927},"end":{"line":73,"col":66,"offset":1975}},{"path":".github/workflows/ai-task.yml","start":{"line":75,"col":6,"offset":1927},"end":{"line":75,"col":34,"offset":1955}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:73:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ vars.AI_MODEL || 'anthropic/claude-3.5-sonnet'` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":73,"col":18,"offset":1927},"end":{"line":73,"col":66,"offset":1975}},{"file":".github/workflows/ai-task.yml","start":{"line":75,"col":6,"offset":1927},"end":{"line":75,"col":34,"offset":1955}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":95,"col":17,"offset":3151},"end":{"line":95,"col":20,"offset":3154}},{"path":".github/workflows/ai-task.yml","start":{"line":95,"col":68,"offset":3151},"end":{"line":95,"col":71,"offset":3154}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:95:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":95,"col":17,"offset":3151},"end":{"line":95,"col":20,"offset":3154}},{"file":".github/workflows/ai-task.yml","start":{"line":95,"col":68,"offset":3151},"end":{"line":95,"col":71,"offset":3154}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":108,"col":38,"offset":3741},"end":{"line":108,"col":82,"offset":3785}},{"path":".github/workflows/ai-task.yml","start":{"line":109,"col":6,"offset":3741},"end":{"line":111,"col":74,"offset":3859}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:108:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ fromJSON(env.AI_EXECUTION_TIMEOUT_MINUTES)` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":108,"col":38,"offset":3741},"end":{"line":108,"col":82,"offset":3785}},{"file":".github/workflows/ai-task.yml","start":{"line":109,"col":6,"offset":3741},"end":{"line":111,"col":74,"offset":3859}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":116,"col":88,"offset":4252},"end":{"line":116,"col":124,"offset":4288}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:116:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_number` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":116,"col":88,"offset":4252},"end":{"line":116,"col":124,"offset":4288}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":128,"col":58,"offset":4808},"end":{"line":128,"col":94,"offset":4844}},{"path":".github/workflows/ai-task.yml","start":{"line":129,"col":18,"offset":4808},"end":{"line":129,"col":54,"offset":4844}},{"path":".github/workflows/ai-task.yml","start":{"line":130,"col":18,"offset":4808},"end":{"line":130,"col":54,"offset":4844}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:128:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_number` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":128,"col":58,"offset":4808},"end":{"line":128,"col":94,"offset":4844}},{"file":".github/workflows/ai-task.yml","start":{"line":129,"col":18,"offset":4808},"end":{"line":129,"col":54,"offset":4844}},{"file":".github/workflows/ai-task.yml","start":{"line":130,"col":18,"offset":4808},"end":{"line":130,"col":54,"offset":4844}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":137,"col":94,"offset":5344},"end":{"line":137,"col":130,"offset":5380}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:137:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_number` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":137,"col":94,"offset":5344},"end":{"line":137,"col":130,"offset":5380}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":144,"col":80,"offset":5656},"end":{"line":144,"col":115,"offset":5691}},{"path":".github/workflows/ai-task.yml","start":{"line":144,"col":123,"offset":5656},"end":{"line":144,"col":159,"offset":5692}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:144:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_title` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":144,"col":80,"offset":5656},"end":{"line":144,"col":115,"offset":5691}},{"file":".github/workflows/ai-task.yml","start":{"line":144,"col":123,"offset":5656},"end":{"line":144,"col":159,"offset":5692}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":150,"col":58,"offset":6046},"end":{"line":150,"col":94,"offset":6082}},{"path":".github/workflows/ai-task.yml","start":{"line":151,"col":18,"offset":6046},"end":{"line":151,"col":54,"offset":6082}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:150:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_number` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":150,"col":58,"offset":6046},"end":{"line":150,"col":94,"offset":6082}},{"file":".github/workflows/ai-task.yml","start":{"line":151,"col":18,"offset":6046},"end":{"line":151,"col":54,"offset":6082}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":159,"col":59,"offset":6514},"end":{"line":159,"col":95,"offset":6550}},{"path":".github/workflows/ai-task.yml","start":{"line":160,"col":18,"offset":6514},"end":{"line":160,"col":54,"offset":6550}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:159:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.extract.outputs.issue_number` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":159,"col":59,"offset":6514},"end":{"line":159,"col":95,"offset":6550}},{"file":".github/workflows/ai-task.yml","start":{"line":160,"col":18,"offset":6514},"end":{"line":160,"col":54,"offset":6550}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-task.yml","start":{"line":169,"col":83,"offset":7099},"end":{"line":181,"col":106,"offset":7585}}]],"message":"Syntax error at line .github/workflows/ai-task.yml:169:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW **AI Task Completed!**\n\nI've successfully implemented the requested changes and created a pull request for review.\n\n**Pull Request:** ${{ steps.pr.outputs.pr_url }}\n\n### What happens next?\n1. The PR is ready for your review\n2. Check the implementation and tests\n3. Merge when you're satisfied with the changes\n4. The issue will be automatically closed when the PR is merged\n\nThe \\`ai-task\\` label has been removed and replaced with \\`ai-completed\\` to indicate the task is done.\"\n` was unexpected","path":".github/workflows/ai-task.yml","spans":[{"file":".github/workflows/ai-task.yml","start":{"line":169,"col":83,"offset":7099},"end":{"line":181,"col":106,"offset":7585}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"scripts/execute-ai-task.sh","start":{"line":104,"col":20,"offset":0},"end":{"line":262,"col":11,"offset":6439}}]],"message":"Syntax error at line scripts/execute-ai-task.sh:104:\n `() {\n    local response=\"$1\"\n    local issue_number=\"$2\"\n\n    log_info \"Processing AI response for issue #${issue_number}...\"\n\n    # Validate response size\n    local response_size=${#response}\n    if (( response_size > MAX_RESPONSE_SIZE )); then\n        log_warn \"Large AI response detected (${response_size} chars), truncating...\"\n        response=\"${response:0:$MAX_RESPONSE_SIZE}\"\n    fi\n\n    # Create response file for debugging\n    local response_file=\"ai_response_${issue_number}.md\"\n    echo \"$response\" > \"$response_file\"\n\n    log_info \"AI response saved to $response_file (${#response} characters)\"\n\n    # Check if the response contains code or instructions to implement\n    if echo \"$response\" | grep -qE \"(```|implement|create|modify|update)\"; then\n        log_info \"AI response contains implementation instructions\"\n        return 0\n    else\n        log_warn \"AI response may not contain actionable implementation\"\n        return 0\n    fi\n}\n\n# Handle AI execution failure\nhandle_ai_execution_failure() {\n    local issue_number=\"$1\"\n\n    log_error \"AI execution failed for issue #${issue_number}\"\n\n    # Create failure comment on issue\n    local comment_body=\"🚨 **AI Task Execution Failed**\\n\\nThe AI assistant was unable to complete this task. This could be due to:\\n\\n- API rate limits or service issues\\n- Invalid or unclear requirements\\n- Technical constraints\\n\\nPlease review the issue description and try again, or implement manually.\\n\\nGenerated by AI Workflow Assistant\"\n\n    # Post comment to GitHub issue\n    curl -s -X POST \\\n        -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n        -H \"Accept: application/vnd.github.v3+json\" \\\n        -H \"Content-Type: application/json\" \\\n        \"https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${issue_number}/comments\" \\\n        -d \"$(jq -n --arg body \"$comment_body\" '{body: $body}')\" >/dev/null\n\n    return 1\n}\n\n# Main execution function with comprehensive error handling\nmain() {\n    local issue_number=\"$1\"\n    local overall_exit_code=0\n\n    log_info \"🚀 ENHANCE... (truncated 4408 more characters)","path":"scripts/execute-ai-task.sh","spans":[{"file":"scripts/execute-ai-task.sh","start":{"line":104,"col":20,"offset":0},"end":{"line":262,"col":11,"offset":6439}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-fix-tests.yml","start":{"line":183,"col":6,"offset":5413},"end":{"line":191,"col":25,"offset":5684}}]],"message":"Syntax error at line .github/workflows/ai-fix-tests.yml:183:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Using $AI_MODEL via OpenRouter to fix test issues...\"\npython ./scripts/openrouter-ai-helper.py \\\n  --prompt-file fix_test_prompt.md \\\n  --output-file ai_test_response.md \\\n  --model \"$AI_MODEL\" \\\n  --title \"AI Test Fix\"\n\necho \"AI Response:\"\ncat ai_test_response.md\n` was unexpected","path":".github/workflows/ai-fix-tests.yml","spans":[{"file":".github/workflows/ai-fix-tests.yml","start":{"line":183,"col":6,"offset":5413},"end":{"line":191,"col":25,"offset":5684}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-fix-tests.yml","start":{"line":276,"col":65,"offset":10025},"end":{"line":276,"col":84,"offset":10044}}]],"message":"Syntax error at line .github/workflows/ai-fix-tests.yml:276:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.repository` was unexpected","path":".github/workflows/ai-fix-tests.yml","spans":[{"file":".github/workflows/ai-fix-tests.yml","start":{"line":276,"col":65,"offset":10025},"end":{"line":276,"col":84,"offset":10044}}]},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/quality-checks.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: # Create a detailed security report for PR comment\nCOMMENT_BODY=\"## R`US Security Scan Results\\n\\n\"\n\n# Initialize counters\nTOTAL_ISSUES=0\nHAS_ISSUES=false\n\n# Check npm audit results\nif [ -f npm-audit-results.json ] && [ -s npm-audit-results.json ]; then\n  AUDIT_COUNT=$(jq '.vulnerabilities | length' npm-audit-results.json 2>/dev/null || echo \"0\")\n  if [ \"$AUDIT_COUNT\" -gt 0 ]; then\n    HAS_ISSUES=true\n    TOTAL_ISSUES=$((TOTAL_ISSUES + AUDIT_COUNT))\n    COMMENT_BODY+=\"\\n### R`[i npm audit - Vulnerable Dependencies ($AUDIT_COUNT found)\\n\\n\"\n\n    # Add top 5 most critical vulnerabilities\n    jq -r '.vulnerabilities | to_entries[:5] | .[] |\n      \"- **\" + .value.severity + \"**: \" + .key +\n      \"\\n  - Versions: \" + (.value.range // \"unknown\") +\n      \"\\n  - Via: \" + (.value.via | if type == \"array\" then join(\", \") else . end) + \"\\n\"' \\\n      npm-audit-results.json >> temp_audit.md 2>/dev/null || \\\n      echo \"- Error parsing npm audit results\" >> temp_audit.md\n    COMMENT_BODY+=\"$(cat temp_audit.md)\\n\"\n\n    if [ \"$AUDIT_COUNT\" -gt 5 ]; then\n      COMMENT_BODY+=\"\\n*... and $((AUDIT_COUNT - 5)) more vulnerabilities. See artifacts for full report.*\\n\"\n    fi\n  else\n    COMMENT_BODY+=\"\\n### D]F npm audit - Dependency Security\\nNo vulnerable dependencies found.\\n\"\n  fi\nelse\n  COMMENT_BODY+=\"\\n### D[aQyP npm audit - Dependency Security\\nNo results file generated.\\n\"\nfi\n\n# Check audit-ci results\nif [ -f audit-ci-results.json ] && [ -s audit-ci-results.json ]; then\n  AUDIT_CI_COUNT=$(jq '. | length' audit-ci-results.json 2>/dev/null || echo \"0\")\n  if [ \"$AUDIT_CI_COUNT\" -gt 0 ]; then\n    HAS_ISSUES=true\n    TOTAL_ISSUES=$((TOTAL_ISSUES + AUDIT_CI_COUNT))\n    COMMENT_BODY+=\"\\n### R`[i audit-ci Security Check ($AUDIT_CI_COUNT found)\\n\\n\"\n\n    # Add audit-ci issues\n    jq ... (truncated 3091 more characters)","path":".github/workflows/quality-checks.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/quality-checks.yml","start":{"line":149,"col":1,"offset":4146},"end":{"line":212,"col":4,"offset":6723}}]],"message":"Syntax error at line .github/workflows/quality-checks.yml:149:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `SECURITY_ISSUES=false\nBLOCKING_ISSUES=false\nMEDIUM_HIGH_COUNT=0\n\n# Check npm audit results for medium/high severity issues\nif [ -f npm-audit-results.json ] && [ -s npm-audit-results.json ]; then\n  AUDIT_COUNT=$(jq '.vulnerabilities | length' npm-audit-results.json 2>/dev/null || echo \"0\")\n  AUDIT_MEDIUM_HIGH=$(jq \\\n    '[.vulnerabilities[] | select(.severity == \"moderate\" or \\\n    .severity == \"high\" or .severity == \"critical\")] | length' \\\n    npm-audit-results.json 2>/dev/null || echo \"0\")\n\n  if [ \"$AUDIT_COUNT\" -gt 0 ]; then\n    SECURITY_ISSUES=true\n    echo \"npm audit found $AUDIT_COUNT total vulnerabilities ($AUDIT_MEDIUM_HIGH medium/high severity)\"\n  fi\n\n  if [ \"$AUDIT_MEDIUM_HIGH\" -gt 0 ]; then\n    BLOCKING_ISSUES=true\n    MEDIUM_HIGH_COUNT=$((MEDIUM_HIGH_COUNT + AUDIT_MEDIUM_HIGH))\n  fi\nfi\n\n# Check audit-ci results (all vulnerabilities are considered medium/high)\nif [ -f audit-ci-results.json ] && [ -s audit-ci-results.json ]; then\n  AUDIT_CI_COUNT=$(jq '. | length' audit-ci-results.json 2>/dev/null || echo \"0\")\n  if [ \"$AUDIT_CI_COUNT\" -gt 0 ]; then\n    SECURITY_ISSUES=true\n    BLOCKING_ISSUES=true\n    MEDIUM_HIGH_COUNT=$((MEDIUM_HIGH_COUNT + AUDIT_CI_COUNT))\n    echo \"audit-ci found $AUDIT_CI_COUNT vulnerabilities (all considered medium/high)\"\n  fi\nfi\n\n# Check Semgrep results for medium/high severity issues\nif [ -f semgrep-results.json ] && [ -s semgrep-results.json ]; then\n  SEMGREP_COUNT=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo \"0\")\n  SEMGREP_MEDIUM_HIGH=$(jq \\\n    '[.results[] | select(.extra.severity == \"MEDIUM\" or \\\n    .extra.severity == \"HIGH\" or .extra.severity == \"ERROR\")] | length' \\\n    semgrep-results.json 2>/dev/null || echo \"0\")\n\n  if [ \"$SEMGREP_COUNT\" -gt 0 ]; then\n    SECURITY_ISSUES=true\n    echo \"Semgrep found $SEMGREP_COUNT total issues ($SEMGREP_MEDIUM_HIGH medium/high severity)\"\n  fi\n\n  if [ \"$SEMGREP_MEDIUM_HIGH\" -gt 0 ]; then\n    BLOCKING_I... (truncated 662 more characters)","path":".github/workflows/quality-checks.yml","spans":[{"file":".github/workflows/quality-checks.yml","start":{"line":149,"col":1,"offset":4146},"end":{"line":212,"col":4,"offset":6723}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/quality-checks.yml","start":{"line":217,"col":55,"offset":7467},"end":{"line":217,"col":103,"offset":7515}},{"path":".github/workflows/quality-checks.yml","start":{"line":222,"col":6,"offset":7467},"end":{"line":228,"col":8,"offset":7761}}]],"message":"Syntax error at line .github/workflows/quality-checks.yml:217:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.security_check.outputs.medium_high_count` was unexpected","path":".github/workflows/quality-checks.yml","spans":[{"file":".github/workflows/quality-checks.yml","start":{"line":217,"col":55,"offset":7467},"end":{"line":217,"col":103,"offset":7515}},{"file":".github/workflows/quality-checks.yml","start":{"line":222,"col":6,"offset":7467},"end":{"line":228,"col":8,"offset":7761}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/quality-checks.yml","start":{"line":365,"col":9,"offset":14613},"end":{"line":365,"col":12,"offset":14616}},{"path":".github/workflows/quality-checks.yml","start":{"line":365,"col":41,"offset":14613},"end":{"line":365,"col":44,"offset":14616}},{"path":".github/workflows/quality-checks.yml","start":{"line":370,"col":16,"offset":14613},"end":{"line":370,"col":19,"offset":14616}},{"path":".github/workflows/quality-checks.yml","start":{"line":372,"col":21,"offset":14613},"end":{"line":372,"col":65,"offset":14657}},{"path":".github/workflows/quality-checks.yml","start":{"line":376,"col":20,"offset":14613},"end":{"line":376,"col":54,"offset":14647}},{"path":".github/workflows/quality-checks.yml","start":{"line":377,"col":15,"offset":14613},"end":{"line":377,"col":59,"offset":14657}}]],"message":"Syntax error at line .github/workflows/quality-checks.yml:365:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/quality-checks.yml","spans":[{"file":".github/workflows/quality-checks.yml","start":{"line":365,"col":9,"offset":14613},"end":{"line":365,"col":12,"offset":14616}},{"file":".github/workflows/quality-checks.yml","start":{"line":365,"col":41,"offset":14613},"end":{"line":365,"col":44,"offset":14616}},{"file":".github/workflows/quality-checks.yml","start":{"line":370,"col":16,"offset":14613},"end":{"line":370,"col":19,"offset":14616}},{"file":".github/workflows/quality-checks.yml","start":{"line":372,"col":21,"offset":14613},"end":{"line":372,"col":65,"offset":14657}},{"file":".github/workflows/quality-checks.yml","start":{"line":376,"col":20,"offset":14613},"end":{"line":376,"col":54,"offset":14647}},{"file":".github/workflows/quality-checks.yml","start":{"line":377,"col":15,"offset":14613},"end":{"line":377,"col":59,"offset":14657}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/quality-checks.yml","start":{"line":389,"col":9,"offset":15815},"end":{"line":389,"col":55,"offset":15861}}]],"message":"Syntax error at line .github/workflows/quality-checks.yml:389:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.security_check.outputs.blocking_issues` was unexpected","path":".github/workflows/quality-checks.yml","spans":[{"file":".github/workflows/quality-checks.yml","start":{"line":389,"col":9,"offset":15815},"end":{"line":389,"col":55,"offset":15861}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-pr-review.yml","start":{"line":190,"col":13,"offset":7674},"end":{"line":190,"col":17,"offset":7678}},{"path":".github/workflows/ai-pr-review.yml","start":{"line":200,"col":3,"offset":7674},"end":{"line":200,"col":70,"offset":7741}}]],"message":"Syntax error at line .github/workflows/ai-pr-review.yml:190:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"${{` was unexpected","path":".github/workflows/ai-pr-review.yml","spans":[{"file":".github/workflows/ai-pr-review.yml","start":{"line":190,"col":13,"offset":7674},"end":{"line":190,"col":17,"offset":7678}},{"file":".github/workflows/ai-pr-review.yml","start":{"line":200,"col":3,"offset":7674},"end":{"line":200,"col":70,"offset":7741}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-pr-review.yml","start":{"line":326,"col":6,"offset":9367},"end":{"line":340,"col":4,"offset":10168}}]],"message":"Syntax error at line .github/workflows/ai-pr-review.yml:326:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Using $AI_MODEL via OpenRouter for PR review (timeout: ${AI_EXECUTION_TIMEOUT_MINUTES} minutes)...\"  # pragma: allowlist secret\nif ! timeout $TIMEOUT_SECONDS python ai_review.py > review_output.md; then\n  echo \"## D[aQyP AI Review Failed\" > review_output.md\n  echo \"AI review could not be completed (timeout or error).\" >> review_output.md\n  echo \"\" >> review_output.md\n  echo \"This could be due to:\" >> review_output.md\n  echo \"- API rate limiting\" >> review_output.md\n  echo \"- Large diff size\" >> review_output.md\n  echo \"- Temporary service issues\" >> review_output.md\n  echo \"\" >> review_output.md\n  echo \"Please retry the review later or request manual review.\" >> review_output.md\n  echo \"ai_review_failed=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"ai_review_failed=false\" >> $GITHUB_OUTPUT\nfi\n` was unexpected","path":".github/workflows/ai-pr-review.yml","spans":[{"file":".github/workflows/ai-pr-review.yml","start":{"line":326,"col":6,"offset":9367},"end":{"line":340,"col":4,"offset":10168}}]},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/ai-orchestrator.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: PR_NUMBER=\"${{ needs.check-trigger.outputs.pr-number }}\"\necho \"R`UN Analyzing PR #$PR_NUMBER for fix requirements...\"\n\n# Get PR labels to see what's already requested\nEXISTING_LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | tr '\\n' ' ')\necho \"Existing labels: $EXISTING_LABELS\"\n\n# Check for existing quality check failures\nNEEDS_LINT=\"false\"\nNEEDS_SECURITY=\"false\"\nNEEDS_TESTS=\"false\"\nNEEDS_DOCS=\"false\"\n\n# Check if quality check workflows have run and failed\n# This is a simplified check - in practice, you'd query the specific workflow runs\nif echo \"$EXISTING_LABELS\" | grep -q \"ai-fix-lint\"; then\n  NEEDS_LINT=\"true\"\nfi\n\nif echo \"$EXISTING_LABELS\" | grep -q \"ai-fix-security\"; then\n  NEEDS_SECURITY=\"true\"\nfi\n\nif echo \"$EXISTING_LABELS\" | grep -q \"ai-fix-tests\"; then\n  NEEDS_TESTS=\"true\"\nfi\n\nif echo \"$EXISTING_LABELS\" | grep -q \"ai-fix-docs\"; then\n  NEEDS_DOCS=\"true\"\nfi\n\n# If no specific labels found, analyze the PR changes\nif [[ \"$NEEDS_LINT\" == \"false\" && \"$NEEDS_SECURITY\" == \"false\" && \\\n      \"$NEEDS_TESTS\" == \"false\" && \"$NEEDS_DOCS\" == \"false\" ]]; then\n  echo \"No specific fix labels found, analyzing PR changes...\"\n\n  # Get list of changed files\n  gh pr diff $PR_NUMBER --name-only > changed-files.txt\n\n  # Check if Python files are changed (need linting)\n  if grep -E '\\.(py|pyi)$' changed-files.txt > /dev/null; then\n    NEEDS_LINT=\"true\"\n    echo \"Python files detected - enabling lint fixes\"\n  fi\n\n  # Check if security-sensitive files are changed\n  if grep -E '\\.(py|js|ts|yaml|yml|json)$' changed-files.txt > /dev/null; then\n    NEEDS_SECURITY=\"true\"\n    echo \"Security-sensitive files detected - enabling security fixes\"\n  fi\n\n  # Check if test files are changed or new code needs tests\n  if grep -E 'test.*\\.(py|js|ts)$|.*_test\\.(py|js|ts)$|\\.(... (truncated 1352 more characters)","path":".github/workflows/ai-orchestrator.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/ai-orchestrator.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: PR_NUMBER=\"${{ steps.pr_number.outputs.pr_number }}\"\necho \"R`UN Checking orchestration trigger for PR #$PR_NUMBER\"\n\n# Get current PR labels\nLABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | tr '\\n' ' ')\necho \"Current labels: $LABELS\"\n\n# Check for orchestration labels\nif echo \"$LABELS\" | grep -E \"(ai-fix-all|ai-orchestrate)\" > /dev/null; then\n  echo \"D]F Orchestration trigger found\"\n  echo \"should_orchestrate=true\" >> $GITHUB_OUTPUT\n  echo \"trigger_type=orchestration\" >> $GITHUB_OUTPUT\nelif echo \"$LABELS\" | grep -E \"ai-fix-\" > /dev/null; then\n  echo \"D]F Single AI fix label found\"\n  echo \"should_orchestrate=true\" >> $GITHUB_OUTPUT\n  echo \"trigger_type=single_fix\" >> $GITHUB_OUTPUT\nelse\n  echo \"D^M No orchestration triggers found\"\n  echo \"should_orchestrate=false\" >> $GITHUB_OUTPUT\n  echo \"trigger_type=none\" >> $GITHUB_OUTPUT\nfi\n","path":".github/workflows/ai-orchestrator.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/ai-orchestrator.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: PR_NUMBER=\"${{ steps.pr_number.outputs.pr_number }}\"\necho \"R`UN Checking quality check status for PR #$PR_NUMBER\"\n\nif [[ \"${{ github.event_name }}\" == \"workflow_run\" ]]; then\n  # Quality check just completed\n  QUALITY_STATUS=\"${{ github.event.workflow_run.conclusion }}\"\n  echo \"Quality check conclusion: $QUALITY_STATUS\"\n\n  if [[ \"$QUALITY_STATUS\" == \"failure\" ]]; then\n    echo \"quality_checks_failed=true\" >> $GITHUB_OUTPUT\n    echo \"needs_analysis=true\" >> $GITHUB_OUTPUT\n  else\n    echo \"quality_checks_failed=false\" >> $GITHUB_OUTPUT\n    echo \"needs_analysis=false\" >> $GITHUB_OUTPUT\n  fi\nelse\n  # Label was added - need to check if quality checks have run\n  echo \"Label trigger - checking existing quality check status\"\n  echo \"quality_checks_failed=unknown\" >> $GITHUB_OUTPUT\n  echo \"needs_analysis=true\" >> $GITHUB_OUTPUT\nfi\n","path":".github/workflows/ai-orchestrator.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":47,"col":20,"offset":1355},"end":{"line":56,"col":74,"offset":1906}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:47:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Q\\ DEBUG: Event information\"\necho \"Event name: ${{ github.event_name }}\"\necho \"Event action: ${{ github.event.action }}\"\necho \"Label name: ${{ github.event.label.name }}\"\necho \"Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}\"\necho \"Workflow run head branch: ${{ github.event.workflow_run.head_branch }}\"\necho \"PR number (workflow_run): ${{\n  github.event.workflow_run.pull_requests[0] &&\n  github.event.workflow_run.pull_requests[0].number || 'none' }}\"\necho \"PR number (pull_request): ${{ github.event.pull_request.number }}\"\n` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":47,"col":20,"offset":1355},"end":{"line":56,"col":74,"offset":1906}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":63,"col":20,"offset":2136},"end":{"line":82,"col":47,"offset":2786}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:63:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UN Determining PR number from event: ${{ github.event_name }}\"\n\nif [[ \"${{ github.event_name }}\" == \"workflow_run\" ]]; then\n  PR_NUMBER=\"${{\n    github.event.workflow_run.pull_requests[0] &&\n    github.event.workflow_run.pull_requests[0].number || '' }}\"\nelif [[ \"${{ github.event_name }}\" == \"pull_request\" ]]; then\n  PR_NUMBER=\"${{ github.event.pull_request.number }}\"\nelse\n  echo \"D^M Unsupported event type: ${{ github.event_name }}\"\n  exit 1\nfi\n\nif [[ -z \"$PR_NUMBER\" || \"$PR_NUMBER\" == \"null\" ]]; then\n  echo \"D^M No PR number found in event\"\n  exit 1\nfi\n\necho \"D]F Found PR number: $PR_NUMBER\"\necho \"pr_number=$PR_NUMBER\" >> $GITHUB_OUTPUT\n` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":63,"col":20,"offset":2136},"end":{"line":82,"col":47,"offset":2786}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":350,"col":20,"offset":13935},"end":{"line":358,"col":67,"offset":14483}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:350:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Q\\ DEBUG: Orchestration results\"\necho \"Lint result: ${{ needs.orchestrate-lint.result }}\"\necho \"Security result: ${{ needs.orchestrate-security.result }}\"\necho \"Tests result: ${{ needs.orchestrate-tests.result }}\"\necho \"Docs result: ${{ needs.orchestrate-docs.result }}\"\necho \"Lint cost: ${{ needs.orchestrate-lint.outputs.cost_used }}\"\necho \"Security cost: ${{ needs.orchestrate-security.outputs.cost_used }}\"\necho \"Tests cost: ${{ needs.orchestrate-tests.outputs.cost_used }}\"\necho \"Docs cost: ${{ needs.orchestrate-docs.outputs.cost_used }}\"\n` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":350,"col":20,"offset":13935},"end":{"line":358,"col":67,"offset":14483}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":364,"col":28,"offset":14692},"end":{"line":364,"col":67,"offset":14731}},{"path":".github/workflows/ai-orchestrator.yml","start":{"line":365,"col":6,"offset":14692},"end":{"line":444,"col":87,"offset":17702}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:364:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.check-trigger.outputs.pr-number` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":364,"col":28,"offset":14692},"end":{"line":364,"col":67,"offset":14731}},{"file":".github/workflows/ai-orchestrator.yml","start":{"line":365,"col":6,"offset":14692},"end":{"line":444,"col":87,"offset":17702}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":450,"col":28,"offset":18564},"end":{"line":450,"col":67,"offset":18603}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:450:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.check-trigger.outputs.pr-number` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":450,"col":28,"offset":18564},"end":{"line":450,"col":67,"offset":18603}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-orchestrator.yml","start":{"line":457,"col":28,"offset":18802},"end":{"line":457,"col":67,"offset":18841}},{"path":".github/workflows/ai-orchestrator.yml","start":{"line":466,"col":6,"offset":18802},"end":{"line":466,"col":37,"offset":18833}},{"path":".github/workflows/ai-orchestrator.yml","start":{"line":467,"col":6,"offset":18802},"end":{"line":467,"col":41,"offset":18837}},{"path":".github/workflows/ai-orchestrator.yml","start":{"line":468,"col":6,"offset":18802},"end":{"line":468,"col":38,"offset":18834}},{"path":".github/workflows/ai-orchestrator.yml","start":{"line":469,"col":6,"offset":18802},"end":{"line":469,"col":37,"offset":18833}}]],"message":"Syntax error at line .github/workflows/ai-orchestrator.yml:457:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.check-trigger.outputs.pr-number` was unexpected","path":".github/workflows/ai-orchestrator.yml","spans":[{"file":".github/workflows/ai-orchestrator.yml","start":{"line":457,"col":28,"offset":18802},"end":{"line":457,"col":67,"offset":18841}},{"file":".github/workflows/ai-orchestrator.yml","start":{"line":466,"col":6,"offset":18802},"end":{"line":466,"col":37,"offset":18833}},{"file":".github/workflows/ai-orchestrator.yml","start":{"line":467,"col":6,"offset":18802},"end":{"line":467,"col":41,"offset":18837}},{"file":".github/workflows/ai-orchestrator.yml","start":{"line":468,"col":6,"offset":18802},"end":{"line":468,"col":38,"offset":18834}},{"file":".github/workflows/ai-orchestrator.yml","start":{"line":469,"col":6,"offset":18802},"end":{"line":469,"col":37,"offset":18833}}]},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/reusable-ai-fix.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: # Check if circuit breaker is open\nCIRCUIT_STATE=$(gh variable get AI_CIRCUIT_STATE --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"CLOSED\")\nCIRCUIT_FAILURES=$(gh variable get AI_CIRCUIT_FAILURES --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"0\")\nCIRCUIT_LAST_FAILURE=$(gh variable get AI_CIRCUIT_LAST_FAILURE --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"0\")\n\nCURRENT_TIME=$(date +%s)\nTIMEOUT_SECONDS=$(($CIRCUIT_BREAKER_TIMEOUT * 60))\n\necho \"Circuit State: $CIRCUIT_STATE\"\necho \"Failures: $CIRCUIT_FAILURES\"\necho \"Last Failure: $CIRCUIT_LAST_FAILURE\"\n\nif [ \"$CIRCUIT_STATE\" = \"OPEN\" ]; then\n  TIME_SINCE_FAILURE=$((CURRENT_TIME - CIRCUIT_LAST_FAILURE))\n  if [ $TIME_SINCE_FAILURE -gt $TIMEOUT_SECONDS ]; then\n    echo \"D[b Moving circuit to HALF-OPEN state\"\n    gh variable set AI_CIRCUIT_STATE --body \"HALF-OPEN\" --repo \"$GITHUB_REPOSITORY\"\n    echo \"circuit_state=HALF-OPEN\" >> $GITHUB_OUTPUT\n    echo \"should_proceed=true\" >> $GITHUB_OUTPUT\n  else\n    echo \"R`Uu Circuit breaker is OPEN, failing fast\"\n    echo \"Remaining timeout: $((TIMEOUT_SECONDS - TIME_SINCE_FAILURE)) seconds\"\n    echo \"circuit_state=OPEN\" >> $GITHUB_OUTPUT\n    echo \"should_proceed=false\" >> $GITHUB_OUTPUT\n  fi\nelse\n  echo \"D]F Circuit breaker allows execution\"\n  echo \"circuit_state=$CIRCUIT_STATE\" >> $GITHUB_OUTPUT\n  echo \"should_proceed=true\" >> $GITHUB_OUTPUT\nfi\n","path":".github/workflows/reusable-ai-fix.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/reusable-ai-fix.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: # Check if there are changes to commit\nif git diff --quiet && git diff --staged --quiet; then\n  echo \"No changes to commit\"\n  echo \"changes_committed=false\" >> $GITHUB_OUTPUT\nelse\n  # Commit changes\n  git add .\n\n  # Create commit message file\n  echo \"R`eW AI Fix: Resolve $FIX_TYPE issues\" > commit-msg.txt\n  echo \"\" >> commit-msg.txt\n  echo \"Applied automated fixes for $FIX_TYPE issues found in PR #$PR_NUMBER.\" >> commit-msg.txt\n  echo \"\" >> commit-msg.txt\n  echo \"R`eW Generated with OpenRouter AI\" >> commit-msg.txt\n  echo \"Co-Authored-By: AI Assistant <noreply@openrouter.ai>\" >> commit-msg.txt\n\n  git commit -F commit-msg.txt || true\n\n  # Push changes\n  git push origin \"$BRANCH_NAME\" || true\n\n  echo \"changes_committed=true\" >> $GITHUB_OUTPUT\n  echo \"D]F Changes committed and pushed\"\nfi\n","path":".github/workflows/reusable-ai-fix.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":102,"col":12,"offset":2804},"end":{"line":102,"col":31,"offset":2823}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":102,"col":42,"offset":2804},"end":{"line":102,"col":56,"offset":2818}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:102:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `i Emergency stop is` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":102,"col":12,"offset":2804},"end":{"line":102,"col":31,"offset":2823}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":102,"col":42,"offset":2804},"end":{"line":102,"col":56,"offset":2818}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":215,"col":6,"offset":6618},"end":{"line":257,"col":57,"offset":8297}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:215:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq COST IMPACT WARNING\"\necho \"----------------------------------------\"\necho \"Fix Type: $FIX_TYPE\"\necho \"Estimated Cost: \\$$ESTIMATED_COST\"\necho \"Note: AI workflows may generate verbose responses which increase actual costs\"\necho \"Consider the cost-benefit trade-off before proceeding with AI fixes\"\necho \"----------------------------------------\"\n\necho \"Current daily cost: $DAILY_COST\"\necho \"Current monthly cost: $MONTHLY_COST\"\necho \"Estimated operation cost: $ESTIMATED_COST\"\n\n# Check if adding this cost would exceed limits\nNEW_DAILY=$(echo \"$DAILY_COST + $ESTIMATED_COST\" | bc -l)\nNEW_MONTHLY=$(echo \"$MONTHLY_COST + $ESTIMATED_COST\" | bc -l)\n\nif (( $(echo \"$NEW_DAILY > $MAX_DAILY_COST\" | bc -l) )); then\n  echo \"D^M Daily cost limit would be exceeded: $NEW_DAILY > $MAX_DAILY_COST\"\n  echo \"should_proceed=false\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\nif (( $(echo \"$NEW_MONTHLY > $MAX_MONTHLY_COST\" | bc -l) )); then\n  echo \"D^M Monthly cost limit would be exceeded: $NEW_MONTHLY > $MAX_MONTHLY_COST\"\n  echo \"should_proceed=false\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Check alert thresholds\nDAILY_PERCENT=$(echo \"scale=2; $NEW_DAILY / $MAX_DAILY_COST * 100\" | bc -l)\nMONTHLY_PERCENT=$(echo \"scale=2; $NEW_MONTHLY / $MAX_MONTHLY_COST * 100\" | bc -l)\n\nif (( $(echo \"$DAILY_PERCENT > $COST_ALERT_THRESHOLD\" | bc -l) )); then\n  echo \"D[aQyP Daily cost alert threshold exceeded: ${DAILY_PERCENT}%\"\nfi\n\nif (( $(echo \"$MONTHLY_PERCENT > $COST_ALERT_THRESHOLD\" | bc -l) )); then\n  echo \"D[aQyP Monthly cost alert threshold exceeded: ${MONTHLY_PERCENT}%\"\nfi\n\necho \"D]F Cost check passed\"\necho \"should_proceed=true\" >> $GITHUB_OUTPUT\necho \"estimated_cost=$ESTIMATED_COST\" >> $GITHUB_OUTPUT\n` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":215,"col":6,"offset":6618},"end":{"line":257,"col":57,"offset":8297}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":388,"col":8,"offset":12378},"end":{"line":394,"col":39,"offset":12560}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:388:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`US AI provided the following SANITIZED fixes:\"\n  cat claude-fixes.txt\nelse\n  echo \"D]F All linting issues resolved with automatic fixes\"\nfi\n\necho \"success=true\" >> $GITHUB_OUTPUT\n` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":388,"col":8,"offset":12378},"end":{"line":394,"col":39,"offset":12560}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":561,"col":6,"offset":23933},"end":{"line":617,"col":39,"offset":26443}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:561:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`T[ Analyzing documentation issues...\"\n\n# Find documentation files\nfind . -name \"*.md\" -o -name \"*.rst\" -o -name \"*.txt\" | head -20 > doc-files.txt\n\n# Use Claude to improve documentation\n# Create prompt file for Claude\necho \"Review and improve the documentation in this repository:\" > docs-prompt.txt\necho \"\" >> docs-prompt.txt\nfind . -name \"README*\" -exec cat {} \\; 2>/dev/null | head -100 >> docs-prompt.txt\necho \"\" >> docs-prompt.txt\necho \"Please provide:\" >> docs-prompt.txt\necho \"1. Suggestions for improving clarity and completeness\" >> docs-prompt.txt\necho \"2. Missing sections that should be added\" >> docs-prompt.txt\necho \"3. Specific text improvements\" >> docs-prompt.txt\necho \"4. Better organization if needed\" >> docs-prompt.txt\necho \"\" >> docs-prompt.txt\necho \"Focus on making the documentation more helpful for users and contributors.\" >> docs-prompt.txt\n\n# Execute AI via OpenRouter with secure output handling\necho \"D[aQyP  SECURITY: AI output will be sanitized to prevent sensitive data exposure\"\npython ./scripts/openrouter-ai-helper.py \\\n  --prompt-file docs-prompt.txt \\\n  --output-file docs-response.txt \\\n  --model \"$AI_MODEL\" \\\n  --title \"AI Documentation Fix\" || {\n  echo \"AI request failed with exit code $?\"\n  echo \"success=false\" >> $GITHUB_OUTPUT\n  exit 1\n}\nCLAUDE_RESULT=$(cat docs-response.txt)\n\n# Sanitize Claude output with improved patterns (avoid false positives)\necho \"$CLAUDE_RESULT\" | sed -E '\n  # Specific API key patterns (more precise)\n  s/\\b(sk-[A-Za-z0-9]{32,})\\b/sk-***REDACTED***/g\n  s/\\b(sk-ant-[A-Za-z0-9_-]{32,})\\b/sk-ant-***REDACTED***/g\n  s/\\b(gh_[A-Za-z0-9_-]{32,})\\b/gh_***REDACTED***/g\n  s/\\b(ghp_[A-Za-z0-9_-]{32,})\\b/ghp_***REDACTED***/g\n\n  # Environment variable assignments\n  s/([A-Z_]+API_KEY)[[:space:]]*=[[:space:]]*[^[:space:]]+/\\1=***REDACTED***/g\n  s/(ANTHROPIC_API_KEY)[[:space:]]*=[[:space:]]*[^[:space:]]+/\\1=***REDACTED***/g\n  s/(GITHUB_TOKEN)[[:space:]]*=[[:spac... (truncated 595 more characters)","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":561,"col":6,"offset":23933},"end":{"line":617,"col":39,"offset":26443}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":675,"col":6,"offset":28719},"end":{"line":675,"col":67,"offset":28780}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:675:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Updated costs: Daily=$NEW_DAILY, Monthly=$NEW_MONTHLY\"\n` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":675,"col":6,"offset":28719},"end":{"line":675,"col":67,"offset":28780}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":687,"col":9,"offset":29716},"end":{"line":687,"col":41,"offset":29748}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":688,"col":9,"offset":29716},"end":{"line":688,"col":45,"offset":29752}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":689,"col":9,"offset":29716},"end":{"line":689,"col":41,"offset":29748}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":690,"col":9,"offset":29716},"end":{"line":690,"col":41,"offset":29748}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:687:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.lint-fix.outputs.success` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":687,"col":9,"offset":29716},"end":{"line":687,"col":41,"offset":29748}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":688,"col":9,"offset":29716},"end":{"line":688,"col":45,"offset":29752}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":689,"col":9,"offset":29716},"end":{"line":689,"col":41,"offset":29748}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":690,"col":9,"offset":29716},"end":{"line":690,"col":41,"offset":29748}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":729,"col":9,"offset":31680},"end":{"line":729,"col":41,"offset":31712}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":730,"col":9,"offset":31680},"end":{"line":730,"col":45,"offset":31716}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":731,"col":9,"offset":31680},"end":{"line":731,"col":41,"offset":31712}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":732,"col":9,"offset":31680},"end":{"line":732,"col":41,"offset":31712}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":737,"col":11,"offset":31680},"end":{"line":737,"col":59,"offset":31728}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:729:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.lint-fix.outputs.success` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":729,"col":9,"offset":31680},"end":{"line":729,"col":41,"offset":31712}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":730,"col":9,"offset":31680},"end":{"line":730,"col":45,"offset":31716}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":731,"col":9,"offset":31680},"end":{"line":731,"col":41,"offset":31712}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":732,"col":9,"offset":31680},"end":{"line":732,"col":41,"offset":31712}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":737,"col":11,"offset":31680},"end":{"line":737,"col":59,"offset":31728}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":757,"col":9,"offset":33013},"end":{"line":757,"col":41,"offset":33045}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":758,"col":9,"offset":33013},"end":{"line":758,"col":45,"offset":33049}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":759,"col":9,"offset":33013},"end":{"line":759,"col":41,"offset":33045}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":760,"col":9,"offset":33013},"end":{"line":760,"col":41,"offset":33045}},{"path":".github/workflows/reusable-ai-fix.yml","start":{"line":766,"col":11,"offset":33013},"end":{"line":766,"col":59,"offset":33061}}]],"message":"Syntax error at line .github/workflows/reusable-ai-fix.yml:757:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.lint-fix.outputs.success` was unexpected","path":".github/workflows/reusable-ai-fix.yml","spans":[{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":757,"col":9,"offset":33013},"end":{"line":757,"col":41,"offset":33045}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":758,"col":9,"offset":33013},"end":{"line":758,"col":45,"offset":33049}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":759,"col":9,"offset":33013},"end":{"line":759,"col":41,"offset":33045}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":760,"col":9,"offset":33013},"end":{"line":760,"col":41,"offset":33045}},{"file":".github/workflows/reusable-ai-fix.yml","start":{"line":766,"col":11,"offset":33013},"end":{"line":766,"col":59,"offset":33061}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/security-review.yml","start":{"line":80,"col":3,"offset":2300},"end":{"line":80,"col":7,"offset":2304}},{"path":".github/workflows/security-review.yml","start":{"line":81,"col":4,"offset":2300},"end":{"line":81,"col":7,"offset":2303}},{"path":".github/workflows/security-review.yml","start":{"line":82,"col":4,"offset":2300},"end":{"line":82,"col":7,"offset":2303}}]],"message":"Syntax error at line .github/workflows/security-review.yml:80:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"${{` was unexpected","path":".github/workflows/security-review.yml","spans":[{"file":".github/workflows/security-review.yml","start":{"line":80,"col":3,"offset":2300},"end":{"line":80,"col":7,"offset":2304}},{"file":".github/workflows/security-review.yml","start":{"line":81,"col":4,"offset":2300},"end":{"line":81,"col":7,"offset":2303}},{"file":".github/workflows/security-review.yml","start":{"line":82,"col":4,"offset":2300},"end":{"line":82,"col":7,"offset":2303}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/security-review.yml","start":{"line":90,"col":22,"offset":2767},"end":{"line":90,"col":25,"offset":2770}},{"path":".github/workflows/security-review.yml","start":{"line":91,"col":13,"offset":2767},"end":{"line":91,"col":32,"offset":2786}},{"path":".github/workflows/security-review.yml","start":{"line":92,"col":19,"offset":2767},"end":{"line":92,"col":22,"offset":2770}}]],"message":"Syntax error at line .github/workflows/security-review.yml:90:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/security-review.yml","spans":[{"file":".github/workflows/security-review.yml","start":{"line":90,"col":22,"offset":2767},"end":{"line":90,"col":25,"offset":2770}},{"file":".github/workflows/security-review.yml","start":{"line":91,"col":13,"offset":2767},"end":{"line":91,"col":32,"offset":2786}},{"file":".github/workflows/security-review.yml","start":{"line":92,"col":19,"offset":2767},"end":{"line":92,"col":22,"offset":2770}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/security-review.yml","start":{"line":111,"col":17,"offset":3559},"end":{"line":111,"col":20,"offset":3562}},{"path":".github/workflows/security-review.yml","start":{"line":112,"col":17,"offset":3559},"end":{"line":112,"col":20,"offset":3562}},{"path":".github/workflows/security-review.yml","start":{"line":113,"col":11,"offset":3559},"end":{"line":113,"col":30,"offset":3578}},{"path":".github/workflows/security-review.yml","start":{"line":114,"col":14,"offset":3559},"end":{"line":114,"col":17,"offset":3562}},{"path":".github/workflows/security-review.yml","start":{"line":115,"col":14,"offset":3559},"end":{"line":115,"col":17,"offset":3562}}]],"message":"Syntax error at line .github/workflows/security-review.yml:111:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/security-review.yml","spans":[{"file":".github/workflows/security-review.yml","start":{"line":111,"col":17,"offset":3559},"end":{"line":111,"col":20,"offset":3562}},{"file":".github/workflows/security-review.yml","start":{"line":112,"col":17,"offset":3559},"end":{"line":112,"col":20,"offset":3562}},{"file":".github/workflows/security-review.yml","start":{"line":113,"col":11,"offset":3559},"end":{"line":113,"col":30,"offset":3578}},{"file":".github/workflows/security-review.yml","start":{"line":114,"col":14,"offset":3559},"end":{"line":114,"col":17,"offset":3562}},{"file":".github/workflows/security-review.yml","start":{"line":115,"col":14,"offset":3559},"end":{"line":115,"col":17,"offset":3562}}]},{"code":2,"level":"warn","type":"Other syntax error","message":"Other syntax error at line .github/semver-config.yml:54:\n (approximate error location; error nearby after) error calling parser: did not find expected key character 0 position 0 returned: 0","path":".github/semver-config.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-fix-lint.yml","start":{"line":126,"col":1,"offset":3980},"end":{"line":187,"col":4,"offset":6391}}]],"message":"Syntax error at line .github/workflows/ai-fix-lint.yml:126:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `echo \"## Checking for remaining lint issues...\" > .temp/remaining_issues.md\necho \"\" >> .temp/remaining_issues.md\n\n# Re-run lint checks to see what's left\nif ! npm run lint > .temp/remaining_eslint.txt 2>&1; then\n  echo \"### Remaining ESLint Issues:\" >> .temp/remaining_issues.md\n  echo '```' >> .temp/remaining_issues.md\n  cat .temp/remaining_eslint.txt >> .temp/remaining_issues.md\n  echo '```' >> .temp/remaining_issues.md\nfi\n\nif ! yaml-lint . > .temp/remaining_yaml.txt 2>&1; then\n  echo \"### Remaining YAML Issues:\" >> .temp/remaining_issues.md\n  echo '```' >> .temp/remaining_issues.md\n  cat .temp/remaining_yaml.txt >> .temp/remaining_issues.md\n  echo '```' >> .temp/remaining_issues.md\nfi\n\nif command -v markdownlint >/dev/null 2>&1; then\n  if ! markdownlint . > .temp/remaining_markdown.txt 2>&1; then\n    echo \"### Remaining Markdown Issues:\" >> .temp/remaining_issues.md\n    echo '```' >> .temp/remaining_issues.md\n    cat .temp/remaining_markdown.txt >> .temp/remaining_issues.md\n    echo '```' >> .temp/remaining_issues.md\n  fi\nfi\n\n# Only use Claude if there are remaining issues\nif [ -s .temp/remaining_eslint.txt ] || [ -s .temp/remaining_yaml.txt ] || \\\n   [ -s .temp/remaining_markdown.txt ]; then\n  echo \"Remaining issues found, using Claude for complex fixes...\"\n\n  cat > .temp/fix_lint_prompt.md << 'EOF'\nI need help fixing the remaining linting issues in this codebase after\nautomatic fixes have been applied. Here are the remaining linting errors:\n\nEOF\n  cat .temp/remaining_issues.md >> .temp/fix_lint_prompt.md\n  cat >> .temp/fix_lint_prompt.md << 'EOF'\n\nPlease fix all the remaining linting issues found above. The fixes should:\n1. Maintain code functionality\n2. Follow project conventions\n3. Fix all remaining ESLint, YAML, and Markdown issues\n4. Not break any existing functionality\n\nPlease analyze the linting issues and make the necessary file changes to fix these issues while preserving functionality.... (truncated 496 more characters)","path":".github/workflows/ai-fix-lint.yml","spans":[{"file":".github/workflows/ai-fix-lint.yml","start":{"line":126,"col":1,"offset":3980},"end":{"line":187,"col":4,"offset":6391}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/ai-fix-security.yml","start":{"line":146,"col":1,"offset":5424},"end":{"line":146,"col":15,"offset":5438}},{"path":".github/workflows/ai-fix-security.yml","start":{"line":155,"col":19,"offset":5424},"end":{"line":182,"col":29,"offset":6530}}]],"message":"Syntax error at line .github/workflows/ai-fix-security.yml:146:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `cat << 'PROMPT` was unexpected","path":".github/workflows/ai-fix-security.yml","spans":[{"file":".github/workflows/ai-fix-security.yml","start":{"line":146,"col":1,"offset":5424},"end":{"line":146,"col":15,"offset":5438}},{"file":".github/workflows/ai-fix-security.yml","start":{"line":155,"col":19,"offset":5424},"end":{"line":182,"col":29,"offset":6530}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"scripts/lib/retry-utils.sh","start":{"line":87,"col":9,"offset":0},"end":{"line":87,"col":73,"offset":64}}]],"message":"Syntax error at line scripts/lib/retry-utils.sh:87:\n `local jitter=$((RANDOM % (jitter_range * 2 + 1) - jitter_range))` was unexpected","path":"scripts/lib/retry-utils.sh","spans":[{"file":"scripts/lib/retry-utils.sh","start":{"line":87,"col":9,"offset":0},"end":{"line":87,"col":73,"offset":64}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"scripts/circuit-breaker-manager.sh","start":{"line":364,"col":68,"offset":0},"end":{"line":364,"col":74,"offset":6}}]],"message":"Syntax error at line scripts/circuit-breaker-manager.sh:364:\n `/ 3600` was unexpected","path":"scripts/circuit-breaker-manager.sh","spans":[{"file":"scripts/circuit-breaker-manager.sh","start":{"line":364,"col":68,"offset":0},"end":{"line":364,"col":74,"offset":6}}]},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/emergency-controls.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: # Create an issue to document the emergency action\nISSUE_TITLE=\"Emergency Action: $ACTION_INPUT\"\n# Create issue body\necho \"## Emergency Action Taken\" > issue-body.txt\necho \"\" >> issue-body.txt\necho \"Action: $ACTION_INPUT\" >> issue-body.txt\necho \"Triggered by: $GITHUB_ACTOR\" >> issue-body.txt\necho \"Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> issue-body.txt\necho \"Reason: $REASON_INPUT\" >> issue-body.txt\necho \"\" >> issue-body.txt\necho \"### Current System Status\" >> issue-body.txt\n\n# Add system status based on action\ncase \"$ACTION_INPUT\" in\n  \"emergency-stop\")\n    echo \"- R`[i Emergency Stop ACTIVE - All AI workflows halted\" >> issue-body.txt\n    echo \"- R`Uu Circuit breaker: OPEN\" >> issue-body.txt\n    echo \"- D[aQyP  Manual intervention required to resume operations\" >> issue-body.txt\n    ;;\n  \"resume-operations\")\n    echo \"- D]F Normal Operations RESUMED\" >> issue-body.txt\n    echo \"- R``c Circuit breaker: CLOSED\" >> issue-body.txt\n    echo \"- R`UE All AI workflows enabled\" >> issue-body.txt\n    ;;\n  \"maintenance-mode-on\")\n    echo \"- R`Uh Maintenance Mode ENABLED\" >> issue-body.txt\n    echo \"- R`Uu AI workflows disabled for maintenance\" >> issue-body.txt\n    echo \"- R`\\aQyP  System under maintenance\" >> issue-body.txt\n    ;;\n  \"maintenance-mode-off\")\n    echo \"- D]F Maintenance Mode DISABLED\" >> issue-body.txt\n    echo \"- R``c Normal operations resumed\" >> issue-body.txt\n    echo \"- R`UE AI workflows re-enabled\" >> issue-body.txt\n    ;;\n  \"circuit-breaker-reset\")\n    echo \"- D[b Circuit Breaker RESET\" >> issue-body.txt\n    echo \"- R``c State: CLOSED\" >> issue-body.txt\n    echo \"- R`UE Failure counter reset to 0\" >> issue-body.txt\n    ;;\n  \"cost-limit-override\")\n    echo \"- R`Sq Cost Limits OVERRIDDEN\" >> issue-body.txt\n    echo \"- R`TI New limit: \\$$OV... (truncated 1033 more characters)","path":".github/workflows/emergency-controls.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":75,"col":20,"offset":2310},"end":{"line":132,"col":46,"offset":3972}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:75:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UN Validating emergency action inputs...\"\n\n# Validate action\ncase \"$ACTION_INPUT\" in\n  emergency-stop|resume-operations|maintenance-mode-on|maintenance-mode-off|circuit-breaker-reset|cost-limit-override)\n    echo \"D]F Valid action: $ACTION_INPUT\"\n    ;;\n  *)\n    echo \"D^M Invalid action: $ACTION_INPUT\"\n    echo \"Valid actions: emergency-stop, resume-operations, maintenance-mode-on, maintenance-mode-off, circuit-breaker-reset, cost-limit-override\"\n    exit 1\n    ;;\nesac\n\n# Validate reason (must be non-empty and reasonable length)\nif [[ -z \"$REASON_INPUT\" ]]; then\n  echo \"D^M Reason cannot be empty\"\n  exit 1\nfi\n\nif [[ ${#REASON_INPUT} -lt 10 ]]; then\n  echo \"D^M Reason must be at least 10 characters long\"\n  exit 1\nfi\n\nif [[ ${#REASON_INPUT} -gt 500 ]]; then\n  echo \"D^M Reason must be less than 500 characters\"\n  exit 1\nfi\n\n# Validate cost limit override if provided\nif [[ \"$ACTION_INPUT\" == \"cost-limit-override\" ]]; then\n  if [[ -z \"$COST_LIMIT_INPUT\" ]]; then\n    echo \"D^M Cost limit override requires override_cost_limit parameter\"\n    exit 1\n  fi\n\n  # Check if it's a valid number\n  if ! [[ \"$COST_LIMIT_INPUT\" =~ ^[0-9]+(\\.[0-9]{1,2})?$ ]]; then\n    echo \"D^M Cost limit must be a valid number (e.g., 100, 250.50)\"\n    exit 1\n  fi\n\n  # Check reasonable bounds (between $1 and $10,000)\n  if (( $(echo \"$COST_LIMIT_INPUT < 1\" | bc -l) )); then\n    echo \"D^M Cost limit must be at least \\$1\"\n    exit 1\n  fi\n\n  if (( $(echo \"$COST_LIMIT_INPUT > 10000\" | bc -l) )); then\n    echo \"D^M Cost limit cannot exceed \\$10,000 for safety\"\n    exit 1\n  fi\n\n  echo \"D]F Valid cost limit: \\$$COST_LIMIT_INPUT\"\nfi\n\necho \"D]F All inputs validated successfully\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":75,"col":20,"offset":2310},"end":{"line":132,"col":46,"offset":3972}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":159,"col":6,"offset":4761},"end":{"line":162,"col":34,"offset":4914}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:159:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`[i Emergency action logged: $ACTION_INPUT\"\necho \"R`Re Triggered by: $GITHUB_ACTOR\"\necho \"R`T^ Reason: $REASON_INPUT\"\necho \"DPq Timestamp: $TIMESTAMP\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":159,"col":6,"offset":4761},"end":{"line":162,"col":34,"offset":4914}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":170,"col":20,"offset":5826},"end":{"line":198,"col":50,"offset":6866}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:170:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`[i ACTIVATING EMERGENCY STOP\"\necho \"All AI workflows will be immediately halted\"\n\n# Set emergency stop flag\ngh variable set EMERGENCY_STOP_ENABLED --body \"true\" --repo \"$GITHUB_REPOSITORY\"\n\n# Open circuit breaker\ngh variable set AI_CIRCUIT_STATE --body \"OPEN\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set AI_CIRCUIT_LAST_FAILURE --body \"$(date +%s)\" --repo \"$GITHUB_REPOSITORY\"\n\n# Cancel any running AI workflows\necho \"Checking for running AI workflows to cancel...\"\n\n# Get running workflows\nRUNNING_WORKFLOWS=$(gh run list --status in_progress --json workflowName,databaseId --jq '.[] | select(.workflowName | test(\"AI|ai-\")) | .databaseId')\n\nif [[ -n \"$RUNNING_WORKFLOWS\" ]]; then\n  echo \"Cancelling running AI workflows:\"\n  echo \"$RUNNING_WORKFLOWS\" | while read -r run_id; do\n    if [[ -n \"$run_id\" ]]; then\n      echo \"  Cancelling run ID: $run_id\"\n      gh run cancel \"$run_id\" || echo \"    Failed to cancel run $run_id\"\n    fi\n  done\nelse\n  echo \"No running AI workflows found\"\nfi\n\necho \"D]F Emergency stop activated successfully\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":170,"col":20,"offset":5826},"end":{"line":198,"col":50,"offset":6866}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":227,"col":20,"offset":8136},"end":{"line":237,"col":50,"offset":8570}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:227:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Uh ENABLING MAINTENANCE MODE\"\n\n# Set maintenance mode\ngh variable set MAINTENANCE_MODE --body \"true\" --repo \"$GITHUB_REPOSITORY\"\n\n# Optionally open circuit breaker for extra safety\ngh variable set AI_CIRCUIT_STATE --body \"OPEN\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set AI_CIRCUIT_LAST_FAILURE --body \"$(date +%s)\" --repo \"$GITHUB_REPOSITORY\"\n\necho \"D]F Maintenance mode enabled\"\necho \"AI workflows are disabled for maintenance\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":227,"col":20,"offset":8136},"end":{"line":237,"col":50,"offset":8570}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":291,"col":20,"offset":10970},"end":{"line":317,"col":72,"offset":12276}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:291:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq OVERRIDING COST LIMITS\"\n\nif [[ -z \"$OVERRIDE_COST_LIMIT\" ]]; then\n  echo \"D^M No override cost limit specified\"\n  exit 1\nfi\n\n# Get current limits for logging\nCURRENT_DAILY=$(gh variable get MAX_DAILY_COST --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"50\")\nCURRENT_MONTHLY=$(gh variable get MAX_MONTHLY_COST --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"500\")\n\necho \"Current daily limit: \\$$CURRENT_DAILY\"\necho \"Current monthly limit: \\$$CURRENT_MONTHLY\"\necho \"New override limit: \\$$OVERRIDE_COST_LIMIT\"\n\n# Set override limits (apply to both daily and monthly for simplicity)\ngh variable set MAX_DAILY_COST --body \"$OVERRIDE_COST_LIMIT\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set MAX_MONTHLY_COST --body \"$OVERRIDE_COST_LIMIT\" --repo \"$GITHUB_REPOSITORY\"\n\n# Set a flag to indicate this is a temporary override\ngh variable set COST_LIMIT_OVERRIDE --body \"true\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set COST_LIMIT_OVERRIDE_TIMESTAMP --body \"$(date +%s)\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set COST_LIMIT_ORIGINAL_DAILY --body \"$CURRENT_DAILY\" --repo \"$GITHUB_REPOSITORY\"\ngh variable set COST_LIMIT_ORIGINAL_MONTHLY --body \"$CURRENT_MONTHLY\" --repo \"$GITHUB_REPOSITORY\"\n\necho \"D]F Cost limits temporarily overridden\"\necho \"D[aQyP  Remember to restore original limits after the emergency\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":291,"col":20,"offset":10970},"end":{"line":317,"col":72,"offset":12276}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":401,"col":20,"offset":16488},"end":{"line":425,"col":52,"offset":17690}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:401:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UN FINAL SYSTEM STATUS CHECK\"\necho \"==============================\"\n\n# Check all emergency-related variables\nEMERGENCY_STOP=$(gh variable get EMERGENCY_STOP_ENABLED --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"false\")\nMAINTENANCE_MODE=$(gh variable get MAINTENANCE_MODE --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"false\")\nCIRCUIT_STATE=$(gh variable get AI_CIRCUIT_STATE --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"CLOSED\")\nCIRCUIT_FAILURES=$(gh variable get AI_CIRCUIT_FAILURES --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"0\")\n\necho \"Emergency Stop:    $EMERGENCY_STOP\"\necho \"Maintenance Mode:  $MAINTENANCE_MODE\"\necho \"Circuit State:     $CIRCUIT_STATE\"\necho \"Circuit Failures:  $CIRCUIT_FAILURES\"\n\n# Check cost override status\nCOST_OVERRIDE=$(gh variable get COST_LIMIT_OVERRIDE --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"false\")\nif [[ \"$COST_OVERRIDE\" == \"true\" ]]; then\n  DAILY_LIMIT=$(gh variable get MAX_DAILY_COST --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"unknown\")\n  echo \"Cost Override:     ACTIVE (Daily: \\$$DAILY_LIMIT)\"\nelse\n  echo \"Cost Override:     INACTIVE\"\nfi\n\necho \"==============================\"\necho \"D]F Emergency action completed successfully\"\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":401,"col":20,"offset":16488},"end":{"line":425,"col":52,"offset":17690}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/emergency-controls.yml","start":{"line":440,"col":20,"offset":18375},"end":{"line":481,"col":8,"offset":19933}}]],"message":"Syntax error at line .github/workflows/emergency-controls.yml:440:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`[i UNAUTHORIZED ACCESS ATTEMPT\"\necho \"===============================\"\necho \"User: $GITHUB_ACTOR\"\necho \"Action: $ACTION_INPUT\"\necho \"Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\"\necho \"===============================\"\n\n# Log the attempt\nTIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')\nLOG_ENTRY=\"$TIMESTAMP,$GITHUB_ACTOR,UNAUTHORIZED_ACCESS,$ACTION_INPUT\"\n\nSECURITY_LOG=$(gh variable get SECURITY_LOG --repo \"$GITHUB_REPOSITORY\" 2>/dev/null || echo \"\")\n\nif [[ -n \"$SECURITY_LOG\" ]]; then\n  NEW_LOG=\"$SECURITY_LOG\\n$LOG_ENTRY\"\n  NEW_LOG=$(echo -e \"$NEW_LOG\" | tail -100)\nelse\n  NEW_LOG=\"$LOG_ENTRY\"\nfi\n\ngh variable set SECURITY_LOG --body \"$NEW_LOG\" --repo \"$GITHUB_REPOSITORY\"\n\n# Create security incident issue\necho \"Unauthorized access attempt detected\" > security-issue.txt\necho \"\" >> security-issue.txt\necho \"User: $GITHUB_ACTOR\" >> security-issue.txt\necho \"Attempted Action: $ACTION_INPUT\" >> security-issue.txt\necho \"Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\" >> security-issue.txt\necho \"Reason Provided: $REASON_INPUT\" >> security-issue.txt\necho \"\" >> security-issue.txt\necho \"This user attempted to access emergency controls but does not have admin permissions.\" >> security-issue.txt\necho \"\" >> security-issue.txt\necho \"Please review this access attempt and take appropriate action.\" >> security-issue.txt\n\ngh issue create \\\n  --title \"Security: Unauthorized Emergency Control Access\" \\\n  --body \"$(cat security-issue.txt)\" \\\n  --label \"security\" \\\n  --label \"unauthorized-access\"\n\necho \"D^M Access denied - incident logged and reported\"\nexit 1\n` was unexpected","path":".github/workflows/emergency-controls.yml","spans":[{"file":".github/workflows/emergency-controls.yml","start":{"line":440,"col":20,"offset":18375},"end":{"line":481,"col":8,"offset":19933}}]},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on .github/workflows/release-generator.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`T^ Generating release notes...\"\n\n# Create release notes generation script\ncat > generate_release_notes.py << 'EOF'\n#!/usr/bin/env python3\nimport json\nimport yaml\nfrom datetime import datetime\nfrom pathlib import Path\n\n# Load analysis data\nwith open('analysis.json', 'r') as f:\n    analysis = json.load(f)\n\n# Load configuration\nconfig_path = Path('.github/semver-config.yml')\nif config_path.exists():\n    with open(config_path, 'r') as f:\n        config = yaml.safe_load(f)\nelse:\n    config = {}\n\n# Get release notes config\nnotes_config = config.get('release_notes', {})\ncategories = notes_config.get('categories', [])\n\n# Organize commits by category\ncategorized_commits = {}\nfor category in categories:\n    categorized_commits[category['name']] = []\n\n# Default category for uncategorized commits\ncategorized_commits['R`Uh Other Changes'] = []\n\n# Categorize commits\nfor commit in analysis.get('commits', []):\n    categorized = False\n    commit_type = commit.get('type', '')\n\n    for category in categories:\n        if commit_type in category.get('commit_types', []):\n            categorized_commits[category['name']].append(commit)\n            categorized = True\n            break\n\n    if not categorized:\n        categorized_commits['R`Uh Other Changes'].append(commit)\n\n# Generate markdown\nversion = \"${{ needs.calculate-version.outputs.final-version }}\"\ndate = datetime.now().strftime('%Y-%m-%d')\n\nmd_lines = [\n    f\"# Release {version}\",\n    f\"\",\n    f\"**Release Date:** {date}\",\n    f\"**Version Type:** {analysis.get('recommended_bump', 'patch').title()}\",\n    f\"\",\n]\n\n# Add summary\ntotal_commits = analysis.get('total_commits', 0)\nfeature_count = analysis.get('feature_count', 0)\nfix_count = analysis.get('fix_count', 0)\nbreaking_count = len(analysis.get('breaking_changes', [... (truncated 3999 more characters)","path":".github/workflows/release-generator.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":76,"col":8,"offset":2074},"end":{"line":76,"col":11,"offset":2077}},{"path":".github/workflows/release-generator.yml","start":{"line":82,"col":12,"offset":2074},"end":{"line":82,"col":35,"offset":2097}},{"path":".github/workflows/release-generator.yml","start":{"line":83,"col":8,"offset":2074},"end":{"line":90,"col":4,"offset":2389}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:76:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":76,"col":8,"offset":2074},"end":{"line":76,"col":11,"offset":2077}},{"file":".github/workflows/release-generator.yml","start":{"line":82,"col":12,"offset":2074},"end":{"line":82,"col":35,"offset":2097}},{"file":".github/workflows/release-generator.yml","start":{"line":83,"col":8,"offset":2074},"end":{"line":90,"col":4,"offset":2389}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":168,"col":72,"offset":5181},"end":{"line":168,"col":88,"offset":5197}},{"path":".github/workflows/release-generator.yml","start":{"line":170,"col":37,"offset":5181},"end":{"line":170,"col":45,"offset":5189}},{"path":".github/workflows/release-generator.yml","start":{"line":179,"col":48,"offset":5181},"end":{"line":179,"col":83,"offset":5216}},{"path":".github/workflows/release-generator.yml","start":{"line":181,"col":37,"offset":5181},"end":{"line":181,"col":45,"offset":5189}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:168:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `(exit code: $?):` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":168,"col":72,"offset":5181},"end":{"line":168,"col":88,"offset":5197}},{"file":".github/workflows/release-generator.yml","start":{"line":170,"col":37,"offset":5181},"end":{"line":170,"col":45,"offset":5189}},{"file":".github/workflows/release-generator.yml","start":{"line":179,"col":48,"offset":5181},"end":{"line":179,"col":83,"offset":5216}},{"file":".github/workflows/release-generator.yml","start":{"line":181,"col":37,"offset":5181},"end":{"line":181,"col":45,"offset":5189}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":279,"col":15,"offset":10479},"end":{"line":398,"col":41,"offset":15074}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:279:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `echo \"R`Uc Calculating final version...\"\necho \"Release type: $RELEASE_TYPE\"\n\n# Use analysis result from artifact\nif [[ -f \"workflow-artifacts/analysis-result.json\" ]]; then\n  echo \"Using analysis result from artifact\"\n  cp workflow-artifacts/analysis-result.json analysis.json\nelse\n  echo \"D^M Error: Analysis result artifact not found\"\n  exit 1\nfi\n\n# Debug: Validate JSON\nif ! jq . analysis.json > /dev/null 2>&1; then\n  echo \"D^M Error: Invalid JSON in ANALYSIS_RESULT\"\n  echo \"Content:\"\n  cat analysis.json\n  exit 1\nfi\n\n# Determine release parameters based on release type and branch\nCURRENT_BRANCH=\"${{ github.ref_name }}\"\nEVENT_NAME=\"${{ github.event_name }}\"\necho \"Current branch: $CURRENT_BRANCH\"\necho \"Event name: $EVENT_NAME\"\n\nPRERELEASE_ID=\"\"\nOVERRIDE_BUMP=\"\"\nPROMOTE_FROM_PRERELEASE=false\n\n# Function to validate version format\nvalidate_version() {\n  local version=$1\n  if [[ ! $version =~ ^[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then\n    echo \"::error::Invalid version format: $version\"\n    return 1\n  fi\n  return 0\n}\n\nif [[ \"$RELEASE_TYPE\" == \"prerelease\" ]]; then\n  # Explicit prerelease requested\n  PRERELEASE_ID=\"beta\"\n  OVERRIDE_BUMP=\"patch\"\n  echo \"R`UA Explicit pre-release requested - creating beta pre-release\"\nelif [[ \"$CURRENT_BRANCH\" == feature/* ]]; then\n  # Feature branch - always create pre-release\n  PRERELEASE_ID=\"beta\"\n  OVERRIDE_BUMP=\"patch\"\n  echo \"R`UA Feature branch detected - creating pre-release with beta suffix\"\nelif [[ \"$CURRENT_BRANCH\" == develop* || \"$CURRENT_BRANCH\" == dev* ]]; then\n  # Development branch - always create pre-release\n  PRERELEASE_ID=\"alpha\"\n  OVERRIDE_BUMP=\"patch\"\n  echo \"R`UA Development branch detected - creating pre-release with alpha suffix\"\nelif [[ \"$CURRENT_BRANCH\" == \"main\" && \"$EVENT_NAME\" == \"pull_request\" ]]; then\n  # PR merged to main - promote from pre-release to stable release\n  PROMOTE_FROM_PRERELEASE=true\n  echo \"R`Tg PR merged to main - pro... (truncated 2680 more characters)","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":279,"col":15,"offset":10479},"end":{"line":398,"col":41,"offset":15074}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":428,"col":20,"offset":16961},"end":{"line":445,"col":4,"offset":17548}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:428:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`T^ Updating package.json to version ${{ needs.calculate-version.outputs.final-version }}...\"\n\n# Update the version in package.json\nNEW_VERSION=\"${{ needs.calculate-version.outputs.final-version }}\"\n\n# Use npm version to update (without creating a git tag)\nnpm version \"$NEW_VERSION\" --no-git-tag-version\n\n# Verify the change\necho \"Updated version in package.json:\"\ngrep '\"version\"' package.json\n\n# Check if there are any changes to commit\nif git diff --quiet package.json; then\n  echo \"No changes needed - version already up to date\"\nelse\n  echo \"D]F Version updated successfully\"\nfi\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":428,"col":20,"offset":16961},"end":{"line":445,"col":4,"offset":17548}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":477,"col":20,"offset":18683},"end":{"line":480,"col":17,"offset":18867}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:477:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UN Validating version progression...\"\npython dev-scripts/version-management/validate-version.py \\\n  --version ${{ needs.calculate-version.outputs.final-version }} \\\n  --output text\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":477,"col":20,"offset":18683},"end":{"line":480,"col":17,"offset":18867}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":770,"col":9,"offset":29625},"end":{"line":770,"col":56,"offset":29672}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:770:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.generate-notes.outputs.release-notes-md` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":770,"col":9,"offset":29625},"end":{"line":770,"col":56,"offset":29672}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":822,"col":16,"offset":31780},"end":{"line":822,"col":61,"offset":31825}},{"path":".github/workflows/release-generator.yml","start":{"line":825,"col":6,"offset":31780},"end":{"line":837,"col":32,"offset":32156}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:822:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.calculate-version.outputs.version-tag` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":822,"col":16,"offset":31780},"end":{"line":822,"col":61,"offset":31825}},{"file":".github/workflows/release-generator.yml","start":{"line":825,"col":6,"offset":31780},"end":{"line":837,"col":32,"offset":32156}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":844,"col":16,"offset":32554},"end":{"line":844,"col":61,"offset":32599}},{"path":".github/workflows/release-generator.yml","start":{"line":847,"col":18,"offset":32554},"end":{"line":847,"col":65,"offset":32601}},{"path":".github/workflows/release-generator.yml","start":{"line":862,"col":6,"offset":32554},"end":{"line":863,"col":55,"offset":32653}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:844:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.calculate-version.outputs.version-tag` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":844,"col":16,"offset":32554},"end":{"line":844,"col":61,"offset":32599}},{"file":".github/workflows/release-generator.yml","start":{"line":847,"col":18,"offset":32554},"end":{"line":847,"col":65,"offset":32601}},{"file":".github/workflows/release-generator.yml","start":{"line":862,"col":6,"offset":32554},"end":{"line":863,"col":55,"offset":32653}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":894,"col":20,"offset":34356},"end":{"line":897,"col":54,"offset":34551}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:894:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Tf Fetching latest changes including version update...\"\ngit fetch origin ${{ github.ref_name }}\ngit checkout origin/${{ github.ref_name }}\necho \"D]F Now on latest commit with version updates\"\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":894,"col":20,"offset":34356},"end":{"line":897,"col":54,"offset":34551}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":907,"col":20,"offset":34802},"end":{"line":920,"col":47,"offset":35294}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:907:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Tg Preparing to publish version ${{ needs.calculate-version.outputs.final-version }}\"\n\n# Verify package.json version matches\nPACKAGE_VERSION=$(node -p \"require('./package.json').version\")\nEXPECTED_VERSION=\"${{ needs.calculate-version.outputs.final-version }}\"\n\nif [[ \"$PACKAGE_VERSION\" != \"$EXPECTED_VERSION\" ]]; then\n  echo \"D^M Version mismatch!\"\n  echo \"  Package.json: $PACKAGE_VERSION\"\n  echo \"  Expected: $EXPECTED_VERSION\"\n  exit 1\nfi\n\necho \"D]F Version verified: $PACKAGE_VERSION\"\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":907,"col":20,"offset":34802},"end":{"line":920,"col":47,"offset":35294}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":939,"col":20,"offset":36041},"end":{"line":971,"col":6,"offset":37005}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:939:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`[A Publishing to npm...\"\n\n# Validate npm token is available\nif [[ -z \"$NODE_AUTH_TOKEN\" ]]; then\n  echo \"D^M Error: NPM_TOKEN secret is not set\"\n  echo \"Please add NPM_TOKEN to your repository secrets\"\n  exit 1\nfi\n\n# Publish with error handling and retry logic\nRETRY_COUNT=0\nMAX_RETRIES=3\n\nwhile [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do\n  if npm publish --access public; then\n    echo \"D]F Successfully published to npm!\"\n    break\n  else\n    RETRY_COUNT=$((RETRY_COUNT + 1))\n    if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then\n      echo \"D[aQyP Publish failed, retrying in 10 seconds (attempt $RETRY_COUNT/$MAX_RETRIES)...\"\n      sleep 10\n    else\n      echo \"D^M Failed to publish after $MAX_RETRIES attempts\"\n      echo \"This may be due to:\"\n      echo \"  - Invalid npm token\"\n      echo \"  - Package name already exists with different owner\"\n      echo \"  - Version already published\"\n      echo \"  - Network connectivity issues\"\n      exit 1\n    fi\n  fi\ndone\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":939,"col":20,"offset":36041},"end":{"line":971,"col":6,"offset":37005}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":980,"col":21,"offset":37359},"end":{"line":980,"col":68,"offset":37406}},{"path":".github/workflows/release-generator.yml","start":{"line":982,"col":6,"offset":37359},"end":{"line":990,"col":4,"offset":37684}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:980:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.calculate-version.outputs.final-version` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":980,"col":21,"offset":37359},"end":{"line":980,"col":68,"offset":37406}},{"file":".github/workflows/release-generator.yml","start":{"line":982,"col":6,"offset":37359},"end":{"line":990,"col":4,"offset":37684}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":1011,"col":20,"offset":38561},"end":{"line":1050,"col":4,"offset":39586}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:1011:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`T^ Updating CHANGELOG.md\"\n\n# Create CHANGELOG.md if it doesn't exist\nif [[ ! -f CHANGELOG.md ]]; then\n  cat > CHANGELOG.md << 'EOF'\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nEOF\nfi\n\n# Prepare new changelog entry\necho '${{ needs.generate-notes.outputs.changelog-entry }}' > new-entry.md\n\n# Insert new entry after the header\n{\n  head -n 6 CHANGELOG.md\n  echo \"\"\n  cat new-entry.md\n  echo \"\"\n  tail -n +7 CHANGELOG.md\n} > CHANGELOG.new.md\n\nmv CHANGELOG.new.md CHANGELOG.md\n\n# Commit changes\ngit config user.name \"github-actions[bot]\"\ngit config user.email \"github-actions[bot]@users.noreply.github.com\"\n\nif git diff --quiet CHANGELOG.md; then\n  echo \"No changes to CHANGELOG.md\"\nelse\n  git add CHANGELOG.md\n  git commit -m \"Update CHANGELOG.md for ${{ needs.calculate-version.outputs.version-tag }}\"\n  git push\nfi\n` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":1011,"col":20,"offset":38561},"end":{"line":1050,"col":4,"offset":39586}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":1064,"col":8,"offset":40196},"end":{"line":1064,"col":11,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1065,"col":44,"offset":40196},"end":{"line":1065,"col":47,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1069,"col":8,"offset":40196},"end":{"line":1069,"col":11,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1075,"col":30,"offset":40196},"end":{"line":1075,"col":77,"offset":40243}},{"path":".github/workflows/release-generator.yml","start":{"line":1076,"col":27,"offset":40196},"end":{"line":1076,"col":74,"offset":40243}},{"path":".github/workflows/release-generator.yml","start":{"line":1077,"col":24,"offset":40196},"end":{"line":1077,"col":65,"offset":40237}},{"path":".github/workflows/release-generator.yml","start":{"line":1078,"col":26,"offset":40196},"end":{"line":1078,"col":73,"offset":40243}},{"path":".github/workflows/release-generator.yml","start":{"line":1082,"col":28,"offset":40196},"end":{"line":1082,"col":31,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1083,"col":28,"offset":40196},"end":{"line":1083,"col":31,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1084,"col":32,"offset":40196},"end":{"line":1084,"col":35,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1085,"col":27,"offset":40196},"end":{"line":1085,"col":30,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1086,"col":29,"offset":40196},"end":{"line":1086,"col":32,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1087,"col":29,"offset":40196},"end":{"line":1087,"col":32,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1088,"col":27,"offset":40196},"end":{"line":1088,"col":30,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1092,"col":10,"offset":40196},"end":{"line":1092,"col":36,"offset":40222}},{"path":".github/workflows/release-generator.yml","start":{"line":1094,"col":22,"offset":40196},"end":{"line":1094,"col":25,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1095,"col":10,"offset":40196},"end":{"line":1095,"col":13,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1101,"col":10,"offset":40196},"end":{"line":1101,"col":39,"offset":40225}},{"path":".github/workflows/release-generator.yml","start":{"line":1102,"col":30,"offset":40196},"end":{"line":1102,"col":75,"offset":40241}},{"path":".github/workflows/release-generator.yml","start":{"line":1103,"col":28,"offset":40196},"end":{"line":1103,"col":31,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1103,"col":53,"offset":40196},"end":{"line":1103,"col":56,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1104,"col":6,"offset":40196},"end":{"line":1104,"col":9,"offset":40199}},{"path":".github/workflows/release-generator.yml","start":{"line":1105,"col":10,"offset":40196},"end":{"line":1105,"col":13,"offset":40199}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:1064:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":1064,"col":8,"offset":40196},"end":{"line":1064,"col":11,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1065,"col":44,"offset":40196},"end":{"line":1065,"col":47,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1069,"col":8,"offset":40196},"end":{"line":1069,"col":11,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1075,"col":30,"offset":40196},"end":{"line":1075,"col":77,"offset":40243}},{"file":".github/workflows/release-generator.yml","start":{"line":1076,"col":27,"offset":40196},"end":{"line":1076,"col":74,"offset":40243}},{"file":".github/workflows/release-generator.yml","start":{"line":1077,"col":24,"offset":40196},"end":{"line":1077,"col":65,"offset":40237}},{"file":".github/workflows/release-generator.yml","start":{"line":1078,"col":26,"offset":40196},"end":{"line":1078,"col":73,"offset":40243}},{"file":".github/workflows/release-generator.yml","start":{"line":1082,"col":28,"offset":40196},"end":{"line":1082,"col":31,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1083,"col":28,"offset":40196},"end":{"line":1083,"col":31,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1084,"col":32,"offset":40196},"end":{"line":1084,"col":35,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1085,"col":27,"offset":40196},"end":{"line":1085,"col":30,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1086,"col":29,"offset":40196},"end":{"line":1086,"col":32,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1087,"col":29,"offset":40196},"end":{"line":1087,"col":32,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1088,"col":27,"offset":40196},"end":{"line":1088,"col":30,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1092,"col":10,"offset":40196},"end":{"line":1092,"col":36,"offset":40222}},{"file":".github/workflows/release-generator.yml","start":{"line":1094,"col":22,"offset":40196},"end":{"line":1094,"col":25,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1095,"col":10,"offset":40196},"end":{"line":1095,"col":13,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1101,"col":10,"offset":40196},"end":{"line":1101,"col":39,"offset":40225}},{"file":".github/workflows/release-generator.yml","start":{"line":1102,"col":30,"offset":40196},"end":{"line":1102,"col":75,"offset":40241}},{"file":".github/workflows/release-generator.yml","start":{"line":1103,"col":28,"offset":40196},"end":{"line":1103,"col":31,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1103,"col":53,"offset":40196},"end":{"line":1103,"col":56,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1104,"col":6,"offset":40196},"end":{"line":1104,"col":9,"offset":40199}},{"file":".github/workflows/release-generator.yml","start":{"line":1105,"col":10,"offset":40196},"end":{"line":1105,"col":13,"offset":40199}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":".github/workflows/release-generator.yml","start":{"line":1121,"col":25,"offset":42850},"end":{"line":1121,"col":28,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1122,"col":25,"offset":42850},"end":{"line":1122,"col":28,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1123,"col":27,"offset":42850},"end":{"line":1123,"col":30,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1124,"col":24,"offset":42850},"end":{"line":1124,"col":27,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1125,"col":24,"offset":42850},"end":{"line":1125,"col":27,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1126,"col":20,"offset":42850},"end":{"line":1126,"col":23,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1127,"col":24,"offset":42850},"end":{"line":1127,"col":27,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1132,"col":23,"offset":42850},"end":{"line":1132,"col":26,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1133,"col":27,"offset":42850},"end":{"line":1133,"col":30,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1134,"col":18,"offset":42850},"end":{"line":1134,"col":21,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1135,"col":11,"offset":42850},"end":{"line":1135,"col":14,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1136,"col":11,"offset":42850},"end":{"line":1136,"col":14,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1137,"col":13,"offset":42850},"end":{"line":1137,"col":16,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1138,"col":18,"offset":42850},"end":{"line":1138,"col":21,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1151,"col":25,"offset":42850},"end":{"line":1151,"col":28,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1152,"col":22,"offset":42850},"end":{"line":1152,"col":25,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1153,"col":19,"offset":42850},"end":{"line":1153,"col":22,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1154,"col":23,"offset":42850},"end":{"line":1154,"col":26,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1155,"col":21,"offset":42850},"end":{"line":1155,"col":24,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1165,"col":53,"offset":42850},"end":{"line":1165,"col":56,"offset":42853}},{"path":".github/workflows/release-generator.yml","start":{"line":1165,"col":59,"offset":42850},"end":{"line":1165,"col":70,"offset":42861}}]],"message":"Syntax error at line .github/workflows/release-generator.yml:1121:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":".github/workflows/release-generator.yml","spans":[{"file":".github/workflows/release-generator.yml","start":{"line":1121,"col":25,"offset":42850},"end":{"line":1121,"col":28,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1122,"col":25,"offset":42850},"end":{"line":1122,"col":28,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1123,"col":27,"offset":42850},"end":{"line":1123,"col":30,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1124,"col":24,"offset":42850},"end":{"line":1124,"col":27,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1125,"col":24,"offset":42850},"end":{"line":1125,"col":27,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1126,"col":20,"offset":42850},"end":{"line":1126,"col":23,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1127,"col":24,"offset":42850},"end":{"line":1127,"col":27,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1132,"col":23,"offset":42850},"end":{"line":1132,"col":26,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1133,"col":27,"offset":42850},"end":{"line":1133,"col":30,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1134,"col":18,"offset":42850},"end":{"line":1134,"col":21,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1135,"col":11,"offset":42850},"end":{"line":1135,"col":14,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1136,"col":11,"offset":42850},"end":{"line":1136,"col":14,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1137,"col":13,"offset":42850},"end":{"line":1137,"col":16,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1138,"col":18,"offset":42850},"end":{"line":1138,"col":21,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1151,"col":25,"offset":42850},"end":{"line":1151,"col":28,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1152,"col":22,"offset":42850},"end":{"line":1152,"col":25,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1153,"col":19,"offset":42850},"end":{"line":1153,"col":22,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1154,"col":23,"offset":42850},"end":{"line":1154,"col":26,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1155,"col":21,"offset":42850},"end":{"line":1155,"col":24,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1165,"col":53,"offset":42850},"end":{"line":1165,"col":56,"offset":42853}},{"file":".github/workflows/release-generator.yml","start":{"line":1165,"col":59,"offset":42850},"end":{"line":1165,"col":70,"offset":42861}}]}],"paths":{"scanned":[".env",".eslintrc.js",".github/CODEOWNERS",".github/ISSUE_TEMPLATE/ai-task.md",".github/pull_request_template.md",".github/repo-config.json",".github/semver-config.yml",".github/workflows/ai-fix-lint.yml",".github/workflows/ai-fix-security.yml",".github/workflows/ai-fix-tests.yml",".github/workflows/ai-orchestrator.yml",".github/workflows/ai-pr-review.yml",".github/workflows/ai-task.yml",".github/workflows/emergency-controls.yml",".github/workflows/quality-checks.yml",".github/workflows/release-generator.yml",".github/workflows/reusable-ai-fix.yml",".github/workflows/security-review.yml",".gitignore",".pre-commit-config.yaml","CLAUDE.md","GEMINI.md","README.md","SETUP_INSTRUCTIONS.md","docs/ISSUE_LABELS.md","docs/TESTING_STANDARDS.md","docs/ai-workflow.md","docs/offline-usage.md","docs/security-best-practices.md","docs/simplified-architecture.md","docs/troubleshooting.md","docs/unified-issue-documentation-workflow.md","docs/workflow-diagram.md","install.sh","npm-audit-results.json","package-lock.json","package.json","scripts/ai-security-review.sh","scripts/circuit-breaker-manager.sh","scripts/comment-no-changes.sh","scripts/commit-changes.sh","scripts/cost-monitor.sh","scripts/create-issue.sh","scripts/create-pr.sh","scripts/determine-branch-prefix.sh","scripts/emergency-audit.sh","scripts/execute-ai-task.sh","scripts/execute-claude-with-visibility.sh","scripts/format-security-results.py","scripts/lib/circuit-breaker-integration.sh","scripts/lib/claude-detection.sh","scripts/lib/common.sh","scripts/lib/cost-estimator.sh","scripts/lib/error-handling.sh","scripts/lib/file-manager.sh","scripts/lib/openrouter-client.sh","scripts/lib/output-sanitizer.sh","scripts/lib/prerequisite-validation.sh","scripts/lib/retry-utils.sh","scripts/lib/security-utils.sh","scripts/lib/thinking-extractor.sh","scripts/openrouter-ai-helper.py","scripts/prompt-templates/bug-fix.md","scripts/prompt-templates/feature-implementation.md","scripts/prompt-templates/refactoring.md","scripts/push-changes.sh","scripts/run-security-scan.sh","scripts/safe-commit.sh","scripts/security_utils.py","scripts/setup-labels.sh","scripts/validate-workflows.sh","shared-commands/README.md","shared-commands/commands/analyze-issue.sh","shared-commands/commands/create-epic.sh","shared-commands/commands/create-spec.sh","shared-commands/commands/create-user-story.sh","shared-commands/commands/generate-spec.sh","shared-commands/commands/generate-user-story.sh","shared-commands/lib/common-utils.sh","shared-commands/lib/github-integration.sh","shared-commands/lib/github-utils.sh","shared-commands/lib/markdown-utils.sh","shared-commands/setup.sh","specs/issue-1-ai-workflow-template-user-management-architecture.md","user-stories/issue-1-ai-workflow-template-user-management.md"]},"time":{"rules":[],"rules_parse_time":1.3086190223693848,"profiling_times":{"config_time":5.396960258483887,"core_time":3.6533915996551514,"ignores_time":0.0021979808807373047,"total_time":9.053532361984253},"parsing_time":{"total_time":0.9794774055480957,"per_file_time":{"mean":0.016324623425801595,"std_dev":0.0002664387384003753},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1073198848},"skipped_rules":[]}
